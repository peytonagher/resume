
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006614  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  0800698c  0800698c  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800698c  0800698c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006990  08006990  00007990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006994  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000068  080069fc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080069fc  000082e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2dd  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002211  00000000  00000000  0001537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00017590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087f  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000316e5  00000000  00000000  00018987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e64a  00000000  00000000  0004a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132eae  00000000  00000000  000586b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  0018b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  0018ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	08006848 	.word	0x08006848

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	08006848 	.word	0x08006848

0800028c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000298:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d013      	beq.n	80002cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d00b      	beq.n	80002cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b4:	e000      	b.n	80002b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002cc:	687b      	ldr	r3, [r7, #4]
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <FDCAN_SendMessage>:
checks to see if number of free elements in the queue before is equal to
the number of free elements in the Queue after the message has been added.
Once that has been checked, the function returns the status HAL_OK if there
are no issues and it transmits the messages.
*/
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < msg->dataLength; i++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e00c      	b.n	8000304 <FDCAN_SendMessage+0x28>
  {
  	// Populates data to new variable called txData.
      txData1[i] = msg->data[i];
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4413      	add	r3, r2
 80002f0:	3305      	adds	r3, #5
 80002f2:	7819      	ldrb	r1, [r3, #0]
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <FDCAN_SendMessage+0xb0>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	460a      	mov	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < msg->dataLength; i++)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3301      	adds	r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	461a      	mov	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4293      	cmp	r3, r2
 800030e:	dbec      	blt.n	80002ea <FDCAN_SendMessage+0xe>
  }
  // Checks the number of free elements in the queue before adding the message.
  freeSlotsBefore_fdcan1 = HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1);
 8000310:	481f      	ldr	r0, [pc, #124]	@ (8000390 <FDCAN_SendMessage+0xb4>)
 8000312:	f001 fd1f 	bl	8001d54 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <FDCAN_SendMessage+0xb8>)
 800031c:	601a      	str	r2, [r3, #0]
  // Adds the message to the transmitting FIFO Queue
  status1 = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader1, txData1);
 800031e:	4a1b      	ldr	r2, [pc, #108]	@ (800038c <FDCAN_SendMessage+0xb0>)
 8000320:	491d      	ldr	r1, [pc, #116]	@ (8000398 <FDCAN_SendMessage+0xbc>)
 8000322:	481b      	ldr	r0, [pc, #108]	@ (8000390 <FDCAN_SendMessage+0xb4>)
 8000324:	f001 fbca 	bl	8001abc <HAL_FDCAN_AddMessageToTxFifoQ>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <FDCAN_SendMessage+0xc0>)
 800032e:	701a      	strb	r2, [r3, #0]

  // Checks the number of free elements in the queue after adding the message.
  freeSlotsAfter_fdcan1 = HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1);
 8000330:	4817      	ldr	r0, [pc, #92]	@ (8000390 <FDCAN_SendMessage+0xb4>)
 8000332:	f001 fd0f 	bl	8001d54 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b19      	ldr	r3, [pc, #100]	@ (80003a0 <FDCAN_SendMessage+0xc4>)
 800033c:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 800033e:	2064      	movs	r0, #100	@ 0x64
 8000340:	f000 ff3a 	bl	80011b8 <HAL_Delay>
//    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader1, txData1) != HAL_OK)
  // Checks if the message was not successfully added to the Queue
  if (status1 != HAL_OK)
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <FDCAN_SendMessage+0xc0>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d007      	beq.n	800035c <FDCAN_SendMessage+0x80>
  {
  	// printf("Failed to add message to TxFIFOQ.");

  	// Prints an error message and returns the status 'Hal_ERROR'
 	    printf("Failed to add message to TxFIFOQ. Status: %d\n", status1);
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <FDCAN_SendMessage+0xc0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	4814      	ldr	r0, [pc, #80]	@ (80003a4 <FDCAN_SendMessage+0xc8>)
 8000354:	f005 fb60 	bl	8005a18 <iprintf>
      return HAL_ERROR;
 8000358:	2301      	movs	r3, #1
 800035a:	e013      	b.n	8000384 <FDCAN_SendMessage+0xa8>
  }
  // Checks if the number of free elements in queue is the same as before
  if (freeSlotsBefore_fdcan1 == freeSlotsAfter_fdcan1)
 800035c:	4b0d      	ldr	r3, [pc, #52]	@ (8000394 <FDCAN_SendMessage+0xb8>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <FDCAN_SendMessage+0xc4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	429a      	cmp	r2, r3
 8000366:	d109      	bne.n	800037c <FDCAN_SendMessage+0xa0>
  {
      printf("Queue unchanged FDCAN1\n");
 8000368:	480f      	ldr	r0, [pc, #60]	@ (80003a8 <FDCAN_SendMessage+0xcc>)
 800036a:	f005 fbc5 	bl	8005af8 <puts>
      printf("Free slots: %d\n", freeSlotsAfter_fdcan1);
 800036e:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <FDCAN_SendMessage+0xc4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	480d      	ldr	r0, [pc, #52]	@ (80003ac <FDCAN_SendMessage+0xd0>)
 8000376:	f005 fb4f 	bl	8005a18 <iprintf>
 800037a:	e002      	b.n	8000382 <FDCAN_SendMessage+0xa6>
  }
  else
  {
      printf("Sent FDCAN1\n");
 800037c:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <FDCAN_SendMessage+0xd4>)
 800037e:	f005 fbbb 	bl	8005af8 <puts>
  }


  return HAL_OK;
 8000382:	2300      	movs	r3, #0
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000016c 	.word	0x2000016c
 8000390:	200000a8 	.word	0x200000a8
 8000394:	2000017c 	.word	0x2000017c
 8000398:	20000120 	.word	0x20000120
 800039c:	20000184 	.word	0x20000184
 80003a0:	20000180 	.word	0x20000180
 80003a4:	08006860 	.word	0x08006860
 80003a8:	08006890 	.word	0x08006890
 80003ac:	080068a8 	.word	0x080068a8
 80003b0:	080068b8 	.word	0x080068b8

080003b4 <HAL_FDCAN_RxFifo0Callback>:
//}


//
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	 * toggling the green LED light on the development board and prints out the message
	 * that the message has been received. This works for low priority messages.
	 */

	/*Checks to see if the interrupt flag is at the status Reset. */
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d03d      	beq.n	8000444 <HAL_FDCAN_RxFifo0Callback+0x90>
  {
      /* Retrieve RX message from RX FIFO0 and checks the status of the function.*/
      if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 80003c8:	4b20      	ldr	r3, [pc, #128]	@ (800044c <HAL_FDCAN_RxFifo0Callback+0x98>)
 80003ca:	4a21      	ldr	r2, [pc, #132]	@ (8000450 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80003cc:	2140      	movs	r1, #64	@ 0x40
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f001 fbb8 	bl	8001b44 <HAL_FDCAN_GetRxMessage>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d004      	beq.n	80003e4 <HAL_FDCAN_RxFifo0Callback+0x30>
      {
          printf("Failed to get Rx Message\n");
 80003da:	481e      	ldr	r0, [pc, #120]	@ (8000454 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 80003dc:	f005 fb8c 	bl	8005af8 <puts>
      	Error_Handler();
 80003e0:	f000 fb62 	bl	8000aa8 <Error_Handler>
      }

      /*Gives a notification for the new message in FIFO0 */
      if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f001 fcc5 	bl	8001d78 <HAL_FDCAN_ActivateNotification>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <HAL_FDCAN_RxFifo0Callback+0x44>
      {
          Error_Handler();
 80003f4:	f000 fb58 	bl	8000aa8 <Error_Handler>
      }
      /*Prints out a message and toggles the green LED on the board*/
//      if (rxHeader1.Identifier == 0x11){
//    	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
//      }
      printf("\n\nReceived FIFO0 id: %lX\n", txHeader1.Identifier);
 80003f8:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4817      	ldr	r0, [pc, #92]	@ (800045c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000400:	f005 fb0a 	bl	8005a18 <iprintf>
      printf("Data: ");
 8000404:	4816      	ldr	r0, [pc, #88]	@ (8000460 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000406:	f005 fb07 	bl	8005a18 <iprintf>

      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // green on-board LED
 800040a:	2101      	movs	r1, #1
 800040c:	4815      	ldr	r0, [pc, #84]	@ (8000464 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800040e:	f002 f9c9 	bl	80027a4 <HAL_GPIO_TogglePin>


      //HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1); // GPIO LED

      /*Prints out the received data*/
      for (int i = 0; i < txHeader1.DataLength; i++)
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	e00a      	b.n	800042e <HAL_FDCAN_RxFifo0Callback+0x7a>
      {
          printf("%02X ", txData1[i]);
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	4413      	add	r3, r2
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4619      	mov	r1, r3
 8000422:	4812      	ldr	r0, [pc, #72]	@ (800046c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000424:	f005 faf8 	bl	8005a18 <iprintf>
      for (int i = 0; i < txHeader1.DataLength; i++)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8000430:	68da      	ldr	r2, [r3, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	429a      	cmp	r2, r3
 8000436:	d8ef      	bhi.n	8000418 <HAL_FDCAN_RxFifo0Callback+0x64>
      }
      printf("\n");
 8000438:	200a      	movs	r0, #10
 800043a:	f005 faff 	bl	8005a3c <putchar>

      messageRecieved = 1;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]

  }

}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000174 	.word	0x20000174
 8000450:	20000144 	.word	0x20000144
 8000454:	080068c4 	.word	0x080068c4
 8000458:	20000120 	.word	0x20000120
 800045c:	080068e0 	.word	0x080068e0
 8000460:	080068fc 	.word	0x080068fc
 8000464:	42020400 	.word	0x42020400
 8000468:	2000016c 	.word	0x2000016c
 800046c:	08006904 	.word	0x08006904
 8000470:	2000010c 	.word	0x2000010c

08000474 <_write>:
//
//}


int _write(int file, char *ptr, int len) // write function that allows the print statements to work.
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  (void)file;
  int dataIdx;

  for (dataIdx = 0; dataIdx < len; dataIdx++)
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e009      	b.n	800049a <_write+0x26>
  {
      ITM_SendChar(*ptr++);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	1c5a      	adds	r2, r3, #1
 800048a:	60ba      	str	r2, [r7, #8]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fefc 	bl	800028c <ITM_SendChar>
  for (dataIdx = 0; dataIdx < len; dataIdx++)
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbf1      	blt.n	8000486 <_write+0x12>
  }

  return len;
 80004a2:	687b      	ldr	r3, [r7, #4]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <main>:



int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
    HAL_Init();
 80004b2:	f000 fdc3 	bl	800103c <HAL_Init>
    SystemClock_Config();
 80004b6:	f000 f8c9 	bl	800064c <SystemClock_Config>
    MX_GPIO_Init();
 80004ba:	f000 f9e1 	bl	8000880 <MX_GPIO_Init>
    MX_FDCAN1_Init();
 80004be:	f000 f94f 	bl	8000760 <MX_FDCAN1_Init>
    //MX_FDCAN2_Init();
    MX_ICACHE_Init();
 80004c2:	f000 f9c9 	bl	8000858 <MX_ICACHE_Init>
    MX_FLASH_Init();
 80004c6:	f000 f9b5 	bl	8000834 <MX_FLASH_Init>
    MX_CRC_Init();
 80004ca:	f000 f927 	bl	800071c <MX_CRC_Init>

    if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80004ce:	4856      	ldr	r0, [pc, #344]	@ (8000628 <main+0x17c>)
 80004d0:	f001 facc 	bl	8001a6c <HAL_FDCAN_Start>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <main+0x32>
	{
		Error_Handler();
 80004da:	f000 fae5 	bl	8000aa8 <Error_Handler>
	}
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	4851      	ldr	r0, [pc, #324]	@ (8000628 <main+0x17c>)
 80004e4:	f001 fc48 	bl	8001d78 <HAL_FDCAN_ActivateNotification>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <main+0x46>
    {
        Error_Handler();
 80004ee:	f000 fadb 	bl	8000aa8 <Error_Handler>
//    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
//    {
//        Error_Handler();
//    }

    msg8.id = 0x11;
 80004f2:	4b4e      	ldr	r3, [pc, #312]	@ (800062c <main+0x180>)
 80004f4:	2211      	movs	r2, #17
 80004f6:	601a      	str	r2, [r3, #0]
    msg8.dataLength = 8;
 80004f8:	4b4c      	ldr	r3, [pc, #304]	@ (800062c <main+0x180>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < msg8.dataLength; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e00a      	b.n	800051a <main+0x6e>
    {
        msg8.data[i] = i;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	b2d9      	uxtb	r1, r3
 8000508:	4a48      	ldr	r2, [pc, #288]	@ (800062c <main+0x180>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	3305      	adds	r3, #5
 8000510:	460a      	mov	r2, r1
 8000512:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < msg8.dataLength; i++)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	4b44      	ldr	r3, [pc, #272]	@ (800062c <main+0x180>)
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	461a      	mov	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4293      	cmp	r3, r2
 8000524:	dbee      	blt.n	8000504 <main+0x58>
//    for (int i = 0; i < msg64.dataLength; i++)
//    {
//        msg64.data[i] = i;
//    }

  txHeader1.Identifier = 0x11;
 8000526:	4b42      	ldr	r3, [pc, #264]	@ (8000630 <main+0x184>)
 8000528:	2211      	movs	r2, #17
 800052a:	601a      	str	r2, [r3, #0]
	txHeader1.IdType = FDCAN_STANDARD_ID;
 800052c:	4b40      	ldr	r3, [pc, #256]	@ (8000630 <main+0x184>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
	txHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000532:	4b3f      	ldr	r3, [pc, #252]	@ (8000630 <main+0x184>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	txHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000538:	4b3d      	ldr	r3, [pc, #244]	@ (8000630 <main+0x184>)
 800053a:	2208      	movs	r2, #8
 800053c:	60da      	str	r2, [r3, #12]
	txHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800053e:	4b3c      	ldr	r3, [pc, #240]	@ (8000630 <main+0x184>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
	txHeader1.BitRateSwitch = FDCAN_BRS_ON;
 8000544:	4b3a      	ldr	r3, [pc, #232]	@ (8000630 <main+0x184>)
 8000546:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800054a:	615a      	str	r2, [r3, #20]
	txHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 800054c:	4b38      	ldr	r3, [pc, #224]	@ (8000630 <main+0x184>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
	txHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000552:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <main+0x184>)
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
	txHeader1.MessageMarker = 0;
 8000558:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <main+0x184>)
 800055a:	2200      	movs	r2, #0
 800055c:	621a      	str	r2, [r3, #32]
//	txHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader2.MessageMarker = 0;

    while (1)
    {
    	if (messageRecieved){
 800055e:	4b35      	ldr	r3, [pc, #212]	@ (8000634 <main+0x188>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d003      	beq.n	800056e <main+0xc2>
    					messageRecieved = 0;
 8000566:	4b33      	ldr	r3, [pc, #204]	@ (8000634 <main+0x188>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
    	            	continue;
 800056c:	e05b      	b.n	8000626 <main+0x17a>
//        {
//            printf("%02X ", msg64.data[i]);
//        }
//        printf("\n");

        GPIO_PinState pinStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800056e:	2108      	movs	r1, #8
 8000570:	4831      	ldr	r0, [pc, #196]	@ (8000638 <main+0x18c>)
 8000572:	f002 f8e7 	bl	8002744 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]

        if (pinStatus == GPIO_PIN_RESET )
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d114      	bne.n	80005aa <main+0xfe>
        {
//            printf("not sent :( ");
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2104      	movs	r1, #4
 8000584:	482c      	ldr	r0, [pc, #176]	@ (8000638 <main+0x18c>)
 8000586:	f002 f8f5 	bl	8002774 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
 800058a:	2110      	movs	r1, #16
 800058c:	482a      	ldr	r0, [pc, #168]	@ (8000638 <main+0x18c>)
 800058e:	f002 f909 	bl	80027a4 <HAL_GPIO_TogglePin>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)== GPIO_PIN_SET){
 8000592:	2101      	movs	r1, #1
 8000594:	4829      	ldr	r0, [pc, #164]	@ (800063c <main+0x190>)
 8000596:	f002 f8d5 	bl	8002744 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1de      	bne.n	800055e <main+0xb2>
            	HAL_Delay(500);
 80005a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a4:	f000 fe08 	bl	80011b8 <HAL_Delay>
 80005a8:	e7d9      	b.n	800055e <main+0xb2>
        	//buttonClicked = 1;
        	//printf("button not clicked \n");


        }
        else if(pinStatus == GPIO_PIN_SET )
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d1d6      	bne.n	800055e <main+0xb2>
        {
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2104      	movs	r1, #4
 80005b4:	4820      	ldr	r0, [pc, #128]	@ (8000638 <main+0x18c>)
 80005b6:	f002 f8dd 	bl	8002774 <HAL_GPIO_WritePin>

            msg8.id += 1;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <main+0x180>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a1a      	ldr	r2, [pc, #104]	@ (800062c <main+0x180>)
 80005c2:	6013      	str	r3, [r2, #0]
            txHeader1.Identifier += 1;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0x184>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <main+0x184>)
 80005cc:	6013      	str	r3, [r2, #0]
            for (int i = 0; i < msg8.dataLength; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	e00f      	b.n	80005f4 <main+0x148>
            {
                msg8.data[i] += 0x01;
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <main+0x180>)
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	3305      	adds	r3, #5
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	b2d9      	uxtb	r1, r3
 80005e2:	4a12      	ldr	r2, [pc, #72]	@ (800062c <main+0x180>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4413      	add	r3, r2
 80005e8:	3305      	adds	r3, #5
 80005ea:	460a      	mov	r2, r1
 80005ec:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < msg8.dataLength; i++)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <main+0x180>)
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	461a      	mov	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4293      	cmp	r3, r2
 80005fe:	dbe9      	blt.n	80005d4 <main+0x128>
            }

            printf("\nID: %lX\n", msg8.id);
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <main+0x180>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <main+0x194>)
 8000608:	f005 fa06 	bl	8005a18 <iprintf>

        	//FDCAN_SendMessage(&msg8);
            //printf("sent :) \n");
            //HAL_Delay(100);
        	if (FDCAN_SendMessage(&msg8)!= HAL_OK){
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <main+0x180>)
 800060e:	f7ff fe65 	bl	80002dc <FDCAN_SendMessage>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d003      	beq.n	8000620 <main+0x174>
        		printf("not sent \n");
 8000618:	480a      	ldr	r0, [pc, #40]	@ (8000644 <main+0x198>)
 800061a:	f005 fa6d 	bl	8005af8 <puts>
 800061e:	e79e      	b.n	800055e <main+0xb2>
        	}
        	else{

        		printf("sent and received \n");
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <main+0x19c>)
 8000622:	f005 fa69 	bl	8005af8 <puts>
    {
 8000626:	e79a      	b.n	800055e <main+0xb2>
 8000628:	200000a8 	.word	0x200000a8
 800062c:	20000110 	.word	0x20000110
 8000630:	20000120 	.word	0x20000120
 8000634:	2000010c 	.word	0x2000010c
 8000638:	42021800 	.word	0x42021800
 800063c:	42020400 	.word	0x42020400
 8000640:	0800690c 	.word	0x0800690c
 8000644:	08006918 	.word	0x08006918
 8000648:	08006924 	.word	0x08006924

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	@ 0x70
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2250      	movs	r2, #80	@ 0x50
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fa54 	bl	8005b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xcc>)
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xcc>)
 8000678:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800067c:	6113      	str	r3, [r2, #16]
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xcc>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068a:	bf00      	nop
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xcc>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	2b08      	cmp	r3, #8
 8000696:	d1f9      	bne.n	800068c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000698:	2310      	movs	r3, #16
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800069c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80006a2:	2320      	movs	r3, #32
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80006b2:	237d      	movs	r3, #125	@ 0x7d
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80006c2:	2308      	movs	r3, #8
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f8ec 	bl	80028b0 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006de:	f000 f9e3 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	231f      	movs	r3, #31
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2105      	movs	r1, #5
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fd0d 	bl	8003120 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f000 f9cc 	bl	8000aa8 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	@ 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	44020800 	.word	0x44020800

0800071c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_CRC_Init+0x3c>)
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <MX_CRC_Init+0x40>)
 8000724:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_CRC_Init+0x3c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_CRC_Init+0x3c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_CRC_Init+0x3c>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_CRC_Init+0x3c>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_CRC_Init+0x3c>)
 8000740:	2201      	movs	r2, #1
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_CRC_Init+0x3c>)
 8000746:	f000 feeb 	bl	8001520 <HAL_CRC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000750:	f000 f9aa 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  /* USER CODE END CRC_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000084 	.word	0x20000084
 800075c:	40023000 	.word	0x40023000

08000760 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000766:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000768:	4a31      	ldr	r2, [pc, #196]	@ (8000830 <MX_FDCAN1_Init+0xd0>)
 800076a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000772:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000774:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000778:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK ;
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 800077c:	2204      	movs	r2, #4
 800077e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000782:	2201      	movs	r2, #1
 8000784:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000788:	2200      	movs	r2, #0
 800078a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 800078e:	2200      	movs	r2, #0
 8000790:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1; //16
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 800079a:	2201      	movs	r2, #1
 800079c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16; //63
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007a0:	2210      	movs	r2, #16
 80007a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8; //16
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1; //4
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16; //15
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007b8:	2210      	movs	r2, #16
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8; //4
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007be:	2208      	movs	r2, #8
 80007c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0; //1
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007d4:	4815      	ldr	r0, [pc, #84]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 80007d6:	f000 ff95 	bl	8001704 <HAL_FDCAN_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 80007e0:	f000 f962 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x11;
 80007f4:	2311      	movs	r3, #17
 80007f6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x22;
 80007f8:	2322      	movs	r3, #34	@ 0x22
 80007fa:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000802:	f001 f8d9 	bl	80019b8 <HAL_FDCAN_ConfigFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_FDCAN1_Init+0xb0>
    {
        /* Filter configuration Error */
        Error_Handler();
 800080c:	f000 f94c 	bl	8000aa8 <Error_Handler>
    }

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_FDCAN1_Init+0xcc>)
 8000816:	f001 faaf 	bl	8001d78 <HAL_FDCAN_ActivateNotification>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_FDCAN1_Init+0xc4>
	{
		Error_Handler();
 8000820:	f000 f942 	bl	8000aa8 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000a8 	.word	0x200000a8
 8000830:	4000a400 	.word	0x4000a400

08000834 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_Init 0 */
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */
  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000838:	f001 fdf0 	bl	800241c <HAL_FLASH_Unlock>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000842:	f000 f931 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000846:	f001 fe0f 	bl	8002468 <HAL_FLASH_Lock>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000850:	f000 f92a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */
  /* USER CODE END FLASH_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */
  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fff7 	bl	8002850 <HAL_ICACHE_ConfigAssociativityMode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000868:	f000 f91e 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800086c:	f002 f810 	bl	8002890 <HAL_ICACHE_Enable>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000876:	f000 f917 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */
  /* USER CODE END ICACHE_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b7d      	ldr	r3, [pc, #500]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800089c:	4a7b      	ldr	r2, [pc, #492]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008a6:	4b79      	ldr	r3, [pc, #484]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b4:	4b75      	ldr	r3, [pc, #468]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ba:	4a74      	ldr	r2, [pc, #464]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008c4:	4b71      	ldr	r3, [pc, #452]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b6e      	ldr	r3, [pc, #440]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d8:	4a6c      	ldr	r2, [pc, #432]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e2:	4b6a      	ldr	r3, [pc, #424]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b66      	ldr	r3, [pc, #408]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f6:	4a65      	ldr	r2, [pc, #404]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000900:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000914:	4a5d      	ldr	r2, [pc, #372]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800091e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092c:	4b57      	ldr	r3, [pc, #348]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 800092e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000932:	4a56      	ldr	r2, [pc, #344]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800093c:	4b53      	ldr	r3, [pc, #332]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 800093e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	4b50      	ldr	r3, [pc, #320]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 800094c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000950:	4a4e      	ldr	r2, [pc, #312]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800095a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a8c <MX_GPIO_Init+0x20c>)
 800095c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000960:	f003 0308 	and.w	r3, r3, #8
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|LD2_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2118      	movs	r1, #24
 800096c:	4848      	ldr	r0, [pc, #288]	@ (8000a90 <MX_GPIO_Init+0x210>)
 800096e:	f001 ff01 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000978:	4846      	ldr	r0, [pc, #280]	@ (8000a94 <MX_GPIO_Init+0x214>)
 800097a:	f001 fefb 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	4845      	ldr	r0, [pc, #276]	@ (8000a98 <MX_GPIO_Init+0x218>)
 8000984:	f001 fef6 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 8000988:	2200      	movs	r2, #0
 800098a:	f241 0117 	movw	r1, #4119	@ 0x1017
 800098e:	4843      	ldr	r0, [pc, #268]	@ (8000a9c <MX_GPIO_Init+0x21c>)
 8000990:	f001 fef0 	bl	8002774 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800099a:	4841      	ldr	r0, [pc, #260]	@ (8000aa0 <MX_GPIO_Init+0x220>)
 800099c:	f001 feea 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	483b      	ldr	r0, [pc, #236]	@ (8000aa4 <MX_GPIO_Init+0x224>)
 80009b6:	f001 fd73 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD2_Pin;
 80009ba:	2318      	movs	r3, #24
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482f      	ldr	r0, [pc, #188]	@ (8000a90 <MX_GPIO_Init+0x210>)
 80009d2:	f001 fd65 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80009d6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0x214>)
 80009f0:	f001 fd56 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2;
 80009f4:	2305      	movs	r3, #5
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <MX_GPIO_Init+0x218>)
 8000a0c:	f001 fd48 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 LD3_Pin
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 8000a10:	f241 0317 	movw	r3, #4119	@ 0x1017
 8000a14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	481c      	ldr	r0, [pc, #112]	@ (8000a9c <MX_GPIO_Init+0x21c>)
 8000a2a:	f001 fd39 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0x220>)
 8000a48:	f001 fd2a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_GPIO_Init+0x220>)
 8000a66:	f001 fd1b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <MX_GPIO_Init+0x21c>)
 8000a7e:	f001 fd0f 	bl	80024a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	@ 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	44020c00 	.word	0x44020c00
 8000a90:	42021400 	.word	0x42021400
 8000a94:	42020000 	.word	0x42020000
 8000a98:	42020400 	.word	0x42020400
 8000a9c:	42021800 	.word	0x42021800
 8000aa0:	42021000 	.word	0x42021000
 8000aa4:	42020800 	.word	0x42020800

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_CRC_MspInit+0x3c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10e      	bne.n	8000af4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <HAL_CRC_MspInit+0x40>)
 8000ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000adc:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <HAL_CRC_MspInit+0x40>)
 8000ade:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ae2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <HAL_CRC_MspInit+0x40>)
 8000ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023000 	.word	0x40023000
 8000b04:	44020c00 	.word	0x44020c00

08000b08 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ce      	sub	sp, #312	@ 0x138
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b12:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b2c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b30:	4618      	mov	r0, r3
 8000b32:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f004 ffe5 	bl	8005b08 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a79      	ldr	r2, [pc, #484]	@ (8000d30 <HAL_FDCAN_MspInit+0x228>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d178      	bne.n	8000c42 <HAL_FDCAN_MspInit+0x13a>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b54:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	f04f 0304 	mov.w	r3, #4
 8000b60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000b64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fdd1 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_FDCAN_MspInit+0x80>
    {
      Error_Handler();
 8000b84:	f7ff ff90 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b88:	4b6a      	ldr	r3, [pc, #424]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a69      	ldr	r2, [pc, #420]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b92:	4b68      	ldr	r3, [pc, #416]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d116      	bne.n	8000bc8 <HAL_FDCAN_MspInit+0xc0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b9a:	4b67      	ldr	r3, [pc, #412]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000b9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ba0:	4a65      	ldr	r2, [pc, #404]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000baa:	4b63      	ldr	r3, [pc, #396]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000bb0:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000bb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000bc6:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bce:	4a5a      	ldr	r2, [pc, #360]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd8:	4b57      	ldr	r3, [pc, #348]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	f003 0208 	and.w	r2, r3, #8
 8000be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000be6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bf0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000bf4:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4848      	ldr	r0, [pc, #288]	@ (8000d3c <HAL_FDCAN_MspInit+0x234>)
 8000c1c:	f001 fc40 	bl	80024a0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2027      	movs	r0, #39	@ 0x27
 8000c26:	f000 fba3 	bl	8001370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c2a:	2027      	movs	r0, #39	@ 0x27
 8000c2c:	f000 fbba 	bl	80013a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2028      	movs	r0, #40	@ 0x28
 8000c36:	f000 fb9b 	bl	8001370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c3a:	2028      	movs	r0, #40	@ 0x28
 8000c3c:	f000 fbb2 	bl	80013a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000c40:	e071      	b.n	8000d26 <HAL_FDCAN_MspInit+0x21e>
  else if(hfdcan->Instance==FDCAN2)
 8000c42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d40 <HAL_FDCAN_MspInit+0x238>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d168      	bne.n	8000d26 <HAL_FDCAN_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c58:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	f04f 0304 	mov.w	r3, #4
 8000c64:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000c68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c74:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fd4f 	bl	8003720 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_FDCAN_MspInit+0x184>
      Error_Handler();
 8000c88:	f7ff ff0e 	bl	8000aa8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a28      	ldr	r2, [pc, #160]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000c94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <HAL_FDCAN_MspInit+0x22c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d116      	bne.n	8000ccc <HAL_FDCAN_MspInit+0x1c4>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c9e:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ca4:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000caa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cb4:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd2:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_FDCAN_MspInit+0x230>)
 8000cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce2:	f003 0202 	and.w	r2, r3, #2
 8000ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cf4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000cf8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cfa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cfe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d14:	2309      	movs	r3, #9
 8000d16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <HAL_FDCAN_MspInit+0x23c>)
 8000d22:	f001 fbbd 	bl	80024a0 <HAL_GPIO_Init>
}
 8000d26:	bf00      	nop
 8000d28:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	4000a400 	.word	0x4000a400
 8000d34:	20000188 	.word	0x20000188
 8000d38:	44020c00 	.word	0x44020c00
 8000d3c:	42020c00 	.word	0x42020c00
 8000d40:	4000a800 	.word	0x4000a800
 8000d44:	42020400 	.word	0x42020400

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f9eb 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000daa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dae:	f001 fd13 	bl	80027d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000dbe:	f001 f8c1 	bl	8001f44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000a8 	.word	0x200000a8

08000dcc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <FDCAN1_IT1_IRQHandler+0x10>)
 8000dd2:	f001 f8b7 	bl	8001f44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000a8 	.word	0x200000a8

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f004 fe30 	bl	8005b18 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200a0000 	.word	0x200a0000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	2000018c 	.word	0x2000018c
 8000eec:	200002e0 	.word	0x200002e0

08000ef0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <SystemInit+0xdc>)
 8000ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efc:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <SystemInit+0xdc>)
 8000efe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f06:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <SystemInit+0xe0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <SystemInit+0xe0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <SystemInit+0xe0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f18:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <SystemInit+0xe0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	492c      	ldr	r1, [pc, #176]	@ (8000fd0 <SystemInit+0xe0>)
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <SystemInit+0xe4>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f24:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <SystemInit+0xe0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000f2a:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <SystemInit+0xe0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <SystemInit+0xe0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <SystemInit+0xe0>)
 8000f38:	4a27      	ldr	r2, [pc, #156]	@ (8000fd8 <SystemInit+0xe8>)
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <SystemInit+0xe0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <SystemInit+0xe0>)
 8000f44:	4a24      	ldr	r2, [pc, #144]	@ (8000fd8 <SystemInit+0xe8>)
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <SystemInit+0xe0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <SystemInit+0xe0>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <SystemInit+0xe8>)
 8000f52:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <SystemInit+0xe0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <SystemInit+0xe0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <SystemInit+0xe0>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <SystemInit+0xe0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <SystemInit+0xdc>)
 8000f6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f72:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <SystemInit+0xec>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000f7c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000f84:	d003      	beq.n	8000f8e <SystemInit+0x9e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000f8c:	d117      	bne.n	8000fbe <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <SystemInit+0xec>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <SystemInit+0xec>)
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <SystemInit+0xf0>)
 8000f9e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <SystemInit+0xec>)
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <SystemInit+0xf4>)
 8000fa4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <SystemInit+0xec>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <SystemInit+0xec>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <SystemInit+0xec>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <SystemInit+0xec>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	61d3      	str	r3, [r2, #28]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	44020c00 	.word	0x44020c00
 8000fd4:	eae2eae3 	.word	0xeae2eae3
 8000fd8:	01010280 	.word	0x01010280
 8000fdc:	40022000 	.word	0x40022000
 8000fe0:	08192a3b 	.word	0x08192a3b
 8000fe4:	4c5d6e7f 	.word	0x4c5d6e7f

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f7ff ff80 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001016:	f004 fd85 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff fa47 	bl	80004ac <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800102c:	08006994 	.word	0x08006994
  ldr r2, =_sbss
 8001030:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001034:	200002e0 	.word	0x200002e0

08001038 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_IRQHandler>
	...

0800103c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f98a 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001046:	f002 fa23 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800104a:	4602      	mov	r2, r0
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_Init+0x44>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	490b      	ldr	r1, [pc, #44]	@ (8001084 <HAL_Init+0x48>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_Init+0x4c>)
 800105e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001060:	2004      	movs	r0, #4
 8001062:	f000 f9cf 	bl	8001404 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f810 	bl	800108c <HAL_InitTick>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e002      	b.n	800107c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001076:	f7ff fd1d 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}
 8001080:	44020c00 	.word	0x44020c00
 8001084:	08006938 	.word	0x08006938
 8001088:	20000000 	.word	0x20000000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001098:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <HAL_InitTick+0xdc>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e05c      	b.n	800115e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80010a4:	4b31      	ldr	r3, [pc, #196]	@ (800116c <HAL_InitTick+0xe0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d10c      	bne.n	80010ca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_InitTick+0xe4>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <HAL_InitTick+0xdc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e037      	b.n	800113a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80010ca:	f000 f9f3 	bl	80014b4 <HAL_SYSTICK_GetCLKSourceConfig>
 80010ce:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d023      	beq.n	800111e <HAL_InitTick+0x92>
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d82d      	bhi.n	8001138 <HAL_InitTick+0xac>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_InitTick+0x5e>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00d      	beq.n	8001104 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80010e8:	e026      	b.n	8001138 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <HAL_InitTick+0xe4>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_InitTick+0xdc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80010f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001100:	60fb      	str	r3, [r7, #12]
        break;
 8001102:	e01a      	b.n	800113a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_InitTick+0xdc>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001112:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]
        break;
 800111c:	e00d      	b.n	800113a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0xdc>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001128:	fbb3 f3f2 	udiv	r3, r3, r2
 800112c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	60fb      	str	r3, [r7, #12]
        break;
 8001136:	e000      	b.n	800113a <HAL_InitTick+0xae>
        break;
 8001138:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f940 	bl	80013c0 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e009      	b.n	800115e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114a:	2200      	movs	r2, #0
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001152:	f000 f90d 	bl	8001370 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001156:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_InitTick+0xe8>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	e000e010 	.word	0xe000e010
 8001170:	20000000 	.word	0x20000000
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000190 	.word	0x20000190

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000190 	.word	0x20000190

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137e:	f7ff ff63 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001382:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f7ff ffb3 	bl	80012f4 <NVIC_EncodePriority>
 800138e:	4602      	mov	r2, r0
 8001390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff82 	bl	80012a0 <__NVIC_SetPriority>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff56 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00d      	b.n	80013f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_SYSTICK_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_SYSTICK_Config+0x40>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_SYSTICK_Config+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <HAL_SYSTICK_Config+0x40>)
 80013ea:	f043 0303 	orr.w	r3, r3, #3
 80013ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d844      	bhi.n	800149c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001412:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	0800143b 	.word	0x0800143b
 800141c:	08001459 	.word	0x08001459
 8001420:	0800147b 	.word	0x0800147b
 8001424:	0800149d 	.word	0x0800149d
 8001428:	0800142d 	.word	0x0800142d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1e      	ldr	r2, [pc, #120]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6013      	str	r3, [r2, #0]
      break;
 8001438:	e031      	b.n	800149e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001448:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800144c:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800144e:	f023 030c 	bic.w	r3, r3, #12
 8001452:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001456:	e022      	b.n	800149e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800146a:	f023 030c 	bic.w	r3, r3, #12
 800146e:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001478:	e011      	b.n	800149e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001488:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800148c:	f023 030c 	bic.w	r3, r3, #12
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800149a:	e000      	b.n	800149e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800149c:	bf00      	nop
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010
 80014b0:	44020c00 	.word	0x44020c00

080014b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80014c6:	2304      	movs	r3, #4
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	e01e      	b.n	800150a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80014ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d00f      	beq.n	80014fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d80f      	bhi.n	8001504 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d003      	beq.n	80014f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80014f0:	e008      	b.n	8001504 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
        break;
 80014f6:	e008      	b.n	800150a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
        break;
 80014fc:	e005      	b.n	800150a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80014fe:	2302      	movs	r3, #2
 8001500:	607b      	str	r3, [r7, #4]
        break;
 8001502:	e002      	b.n	800150a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
        break;
 8001508:	bf00      	nop
    }
  }
  return systick_source;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e010 	.word	0xe000e010
 800151c:	44020c00 	.word	0x44020c00

08001520 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e054      	b.n	80015dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f5b      	ldrb	r3, [r3, #29]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fabe 	bl	8000ac4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <HAL_CRC_Init+0xc4>)
 800155c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0218 	bic.w	r2, r2, #24
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	e00c      	b.n	800158a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6899      	ldr	r1, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	461a      	mov	r2, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f834 	bl	80015e8 <HAL_CRCEx_Polynomial_Set>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e028      	b.n	80015dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	795b      	ldrb	r3, [r3, #5]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	e004      	b.n	80015a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6912      	ldr	r2, [r2, #16]
 80015a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	04c11db7 	.word	0x04c11db7

080015e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015f8:	231f      	movs	r3, #31
 80015fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
 800160a:	e063      	b.n	80016d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800160c:	bf00      	nop
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	613a      	str	r2, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_CRCEx_Polynomial_Set+0x44>
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b18      	cmp	r3, #24
 8001630:	d846      	bhi.n	80016c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c1 	.word	0x080016c1
 8001640:	080016c1 	.word	0x080016c1
 8001644:	080016c1 	.word	0x080016c1
 8001648:	080016c1 	.word	0x080016c1
 800164c:	080016c1 	.word	0x080016c1
 8001650:	080016c1 	.word	0x080016c1
 8001654:	080016c1 	.word	0x080016c1
 8001658:	080016b5 	.word	0x080016b5
 800165c:	080016c1 	.word	0x080016c1
 8001660:	080016c1 	.word	0x080016c1
 8001664:	080016c1 	.word	0x080016c1
 8001668:	080016c1 	.word	0x080016c1
 800166c:	080016c1 	.word	0x080016c1
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016c1 	.word	0x080016c1
 8001678:	080016a9 	.word	0x080016a9
 800167c:	080016c1 	.word	0x080016c1
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016c1 	.word	0x080016c1
 8001688:	080016c1 	.word	0x080016c1
 800168c:	080016c1 	.word	0x080016c1
 8001690:	080016c1 	.word	0x080016c1
 8001694:	080016c1 	.word	0x080016c1
 8001698:	0800169d 	.word	0x0800169d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d913      	bls.n	80016ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016a6:	e010      	b.n	80016ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	d90f      	bls.n	80016ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016b2:	e00c      	b.n	80016ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d90b      	bls.n	80016d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016be:	e008      	b.n	80016d2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	75fb      	strb	r3, [r7, #23]
        break;
 80016c4:	e006      	b.n	80016d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016c6:	bf00      	nop
 80016c8:	e004      	b.n	80016d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016ca:	bf00      	nop
 80016cc:	e002      	b.n	80016d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10d      	bne.n	80016f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 0118 	bic.w	r1, r3, #24
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e147      	b.n	80019a6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff f9ec 	bl	8000b08 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0210 	bic.w	r2, r2, #16
 800173e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001740:	f7ff fd2e 	bl	80011a0 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001746:	e012      	b.n	800176e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001748:	f7ff fd2a 	bl	80011a0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b0a      	cmp	r3, #10
 8001754:	d90b      	bls.n	800176e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e11b      	b.n	80019a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b08      	cmp	r3, #8
 800177a:	d0e5      	beq.n	8001748 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800178c:	f7ff fd08 	bl	80011a0 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001792:	e012      	b.n	80017ba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001794:	f7ff fd04 	bl	80011a0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d90b      	bls.n	80017ba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0f5      	b.n	80019a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0e5      	beq.n	8001794 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0202 	orr.w	r2, r2, #2
 80017d6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a74      	ldr	r2, [pc, #464]	@ (80019b0 <HAL_FDCAN_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d103      	bne.n	80017ea <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80017e2:	4a74      	ldr	r2, [pc, #464]	@ (80019b4 <HAL_FDCAN_Init+0x2b0>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7c1b      	ldrb	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001800:	619a      	str	r2, [r3, #24]
 8001802:	e007      	b.n	8001814 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001812:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7c5b      	ldrb	r3, [r3, #17]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	e007      	b.n	800183e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800183c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7c9b      	ldrb	r3, [r3, #18]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001854:	619a      	str	r2, [r3, #24]
 8001856:	e007      	b.n	8001868 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001866:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800188c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0210 	bic.w	r2, r2, #16
 800189c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0204 	orr.w	r2, r2, #4
 80018b4:	619a      	str	r2, [r3, #24]
 80018b6:	e02c      	b.n	8001912 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d028      	beq.n	8001912 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d01c      	beq.n	8001902 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018d6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0210 	orr.w	r2, r2, #16
 80018e6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d110      	bne.n	8001912 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	e007      	b.n	8001912 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0220 	orr.w	r2, r2, #32
 8001910:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	3b01      	subs	r3, #1
 8001918:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	3b01      	subs	r3, #1
 8001920:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001922:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800192a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800193a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800193c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001946:	d115      	bne.n	8001974 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	3b01      	subs	r3, #1
 8001954:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001956:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	3b01      	subs	r3, #1
 800195e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001960:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	3b01      	subs	r3, #1
 800196a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001970:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001972:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fc68 	bl	8002260 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	4000a400 	.word	0x4000a400
 80019b4:	4000a500 	.word	0x4000a500

080019b8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019c8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d002      	beq.n	80019d6 <HAL_FDCAN_ConfigFilter+0x1e>
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d13d      	bne.n	8001a52 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d119      	bne.n	8001a12 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019ea:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80019f2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e01d      	b.n	8001a4e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	075a      	lsls	r2, r3, #29
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	079a      	lsls	r2, r3, #30
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3304      	adds	r3, #4
 8001a46:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e006      	b.n	8001a60 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a56:	f043 0202 	orr.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d110      	bne.n	8001aa2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e006      	b.n	8001ab0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	f043 0204 	orr.w	r2, r3, #4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d12c      	bne.n	8001b2e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e023      	b.n	8001b3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fc0a 	bl	8002324 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001b20:	2201      	movs	r2, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e006      	b.n	8001b3c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b32:	f043 0208 	orr.w	r2, r3, #8
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b08b      	sub	sp, #44	@ 0x2c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b5c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b5e:	7efb      	ldrb	r3, [r7, #27]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	f040 80e8 	bne.w	8001d36 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b40      	cmp	r3, #64	@ 0x40
 8001b6a:	d137      	bne.n	8001bdc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0db      	b.n	8001d44 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b94:	0e1b      	lsrs	r3, r3, #24
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	e036      	b.n	8001c4a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0a3      	b.n	8001d44 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c04:	0e1b      	lsrs	r3, r3, #24
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d10a      	bne.n	8001c24 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0c9b      	lsrs	r3, r3, #18
 8001c64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e005      	b.n	8001c7a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	3304      	adds	r3, #4
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e1b      	lsrs	r3, r3, #24
 8001cce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0fda      	lsrs	r2, r3, #31
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	e00a      	b.n	8001d06 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	440b      	add	r3, r1
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	3301      	adds	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a11      	ldr	r2, [pc, #68]	@ (8001d50 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d3ec      	bcc.n	8001cf0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	d105      	bne.n	8001d28 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001d26:	e004      	b.n	8001d32 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e006      	b.n	8001d44 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	f043 0208 	orr.w	r2, r3, #8
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
  }
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	372c      	adds	r7, #44	@ 0x2c
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	08006948 	.word	0x08006948

08001d54 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d8a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d003      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0x22>
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	f040 80c8 	bne.w	8001f2a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03b      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d031      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d027      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01d      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d013      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d13b      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d131      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d127      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11d      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d113      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0202 	orr.w	r2, r2, #2
 8001ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e006      	b.n	8001f38 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	@ 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f60:	4013      	ands	r3, r2
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f78:	4013      	ands	r3, r2
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	4013      	ands	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001f9e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fb6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f916 	bl	8002222 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002012:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800202a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8d8 	bl	80021e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002040:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8a2 	bl	800218e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002056:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe f9aa 	bl	80003b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800206e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f897 	bl	80021a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002092:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f890 	bl	80021ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d013      	beq.n	80020d6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f87c 	bl	80021ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00c      	beq.n	80020fa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f880 	bl	80021fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002116:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f878 	bl	800220e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800213a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f876 	bl	800224a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f858 	bl	8002236 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002186:	bf00      	nop
 8002188:	3730      	adds	r7, #48	@ 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002268:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800226a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2b      	ldr	r2, [pc, #172]	@ (8002320 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d103      	bne.n	800227e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800227c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800228c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	061a      	lsls	r2, r3, #24
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e005      	b.n	8002300 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3f3      	bcc.n	80022f4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	4000ac00 	.word	0x4000ac00
 8002320:	4000a800 	.word	0x4000a800

08002324 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002342:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800234a:	4313      	orrs	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e00a      	b.n	8002366 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002358:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800235e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002364:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002370:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002376:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800237c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3304      	adds	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	3304      	adds	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e020      	b.n	80023fa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3303      	adds	r3, #3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3302      	adds	r3, #2
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	440b      	add	r3, r1
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	440b      	add	r3, r1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80023de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	440a      	add	r2, r1
 80023e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80023e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3304      	adds	r3, #4
 80023f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3304      	adds	r3, #4
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <FDCAN_CopyMessageToRAM+0xf4>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	461a      	mov	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4293      	cmp	r3, r2
 8002408:	d3d6      	bcc.n	80023b8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	@ 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	08006948 	.word	0x08006948

0800241c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_FLASH_Unlock+0x44>)
 8002436:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_FLASH_Unlock+0x48>)
 800243c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800244e:	79fb      	ldrb	r3, [r7, #7]
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40022000 	.word	0x40022000
 8002460:	45670123 	.word	0x45670123
 8002464:	cdef89ab 	.word	0xcdef89ab

08002468 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <HAL_FLASH_Lock+0x34>)
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_FLASH_Lock+0x34>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800247e:	4b07      	ldr	r3, [pc, #28]	@ (800249c <HAL_FLASH_Lock+0x34>)
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024ae:	e136      	b.n	800271e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8128 	beq.w	8002718 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x38>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d125      	bne.n	8002524 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	08da      	lsrs	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3208      	adds	r2, #8
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	6979      	ldr	r1, [r7, #20]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00b      	beq.n	8002578 <HAL_GPIO_Init+0xd8>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256c:	2b11      	cmp	r3, #17
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4013      	ands	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0201 	and.w	r2, r3, #1
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d017      	beq.n	8002612 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4013      	ands	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07c      	beq.n	8002718 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800261e:	4a47      	ldr	r2, [pc, #284]	@ (800273c <HAL_GPIO_Init+0x29c>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3318      	adds	r3, #24
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0a9a      	lsrs	r2, r3, #10
 8002646:	4b3e      	ldr	r3, [pc, #248]	@ (8002740 <HAL_GPIO_Init+0x2a0>)
 8002648:	4013      	ands	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	00d2      	lsls	r2, r2, #3
 8002652:	4093      	lsls	r3, r2
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800265a:	4938      	ldr	r1, [pc, #224]	@ (800273c <HAL_GPIO_Init+0x29c>)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3318      	adds	r3, #24
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002668:	4b34      	ldr	r3, [pc, #208]	@ (800273c <HAL_GPIO_Init+0x29c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4013      	ands	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <HAL_GPIO_Init+0x29c>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002692:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_GPIO_Init+0x29c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4013      	ands	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80026b6:	4a21      	ldr	r2, [pc, #132]	@ (800273c <HAL_GPIO_Init+0x29c>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <HAL_GPIO_Init+0x29c>)
 80026be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4013      	ands	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80026e2:	4a16      	ldr	r2, [pc, #88]	@ (800273c <HAL_GPIO_Init+0x29c>)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_GPIO_Init+0x29c>)
 80026ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002710:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <HAL_GPIO_Init+0x29c>)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3301      	adds	r3, #1
 800271c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f aec1 	bne.w	80024b0 <HAL_GPIO_Init+0x10>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	44022000 	.word	0x44022000
 8002740:	002f7f7f 	.word	0x002f7f7f

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43d9      	mvns	r1, r3
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	400b      	ands	r3, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002820 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f814 	bl	8002824 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002808:	4a05      	ldr	r2, [pc, #20]	@ (8002820 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f812 	bl	800283a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	44022000 	.word	0x44022000

08002824 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e007      	b.n	800287e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0204 	bic.w	r2, r3, #4
 8002876:	4905      	ldr	r1, [pc, #20]	@ (800288c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40030400 	.word	0x40030400

08002890 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_ICACHE_Enable+0x1c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <HAL_ICACHE_Enable+0x1c>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40030400 	.word	0x40030400

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f000 bc28 	b.w	8003114 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4b94      	ldr	r3, [pc, #592]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 0318 	and.w	r3, r3, #24
 80028cc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80028ce:	4b92      	ldr	r3, [pc, #584]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b18      	cmp	r3, #24
 80028ee:	d114      	bne.n	800291a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d111      	bne.n	800291a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f000 bc08 	b.w	8003114 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002904:	4b84      	ldr	r3, [pc, #528]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	4981      	ldr	r1, [pc, #516]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002914:	4313      	orrs	r3, r2
 8002916:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002918:	e040      	b.n	800299c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d023      	beq.n	800296a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002922:	4b7d      	ldr	r3, [pc, #500]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7c      	ldr	r2, [pc, #496]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fc37 	bl	80011a0 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002936:	f7fe fc33 	bl	80011a0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e3e5      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002954:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	496d      	ldr	r1, [pc, #436]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002964:	4313      	orrs	r3, r2
 8002966:	618b      	str	r3, [r1, #24]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800296a:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6a      	ldr	r2, [pc, #424]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fc13 	bl	80011a0 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800297e:	f7fe fc0f 	bl	80011a0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e3c1      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a0 	beq.w	8002aea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x10c>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b18      	cmp	r3, #24
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 8092 	bne.w	8002aea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e3a4      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x132>
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0x160>
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b48      	ldr	r3, [pc, #288]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a47      	ldr	r2, [pc, #284]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 80029fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a44      	ldr	r2, [pc, #272]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e041      	b.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x190>
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b39      	ldr	r3, [pc, #228]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a38      	ldr	r2, [pc, #224]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1c0>
 8002a4a:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a32      	ldr	r2, [pc, #200]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e011      	b.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a28      	ldr	r2, [pc, #160]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b23      	ldr	r3, [pc, #140]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002a8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fb80 	bl	80011a0 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb7c 	bl	80011a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e32e      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab6:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x1f4>
 8002ac2:	e012      	b.n	8002aea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fb6c 	bl	80011a0 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fb68 	bl	80011a0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e31a      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ade:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <HAL_RCC_OscConfig+0x268>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 809a 	beq.w	8002c2c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x25a>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b18      	cmp	r3, #24
 8002b02:	d149      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d146      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e2fe      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
 8002b16:	bf00      	nop
 8002b18:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002b22:	4b9a      	ldr	r3, [pc, #616]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0218 	and.w	r2, r3, #24
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d014      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002b32:	4b96      	ldr	r3, [pc, #600]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0218 	bic.w	r2, r3, #24
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	4993      	ldr	r1, [pc, #588]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002b44:	f000 fdd0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b48:	4b91      	ldr	r3, [pc, #580]	@ (8002d90 <HAL_RCC_OscConfig+0x4e0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fa9d 	bl	800108c <HAL_InitTick>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e2db      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb20 	bl	80011a0 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fb1c 	bl	80011a0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e2ce      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b76:	4b85      	ldr	r3, [pc, #532]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002b82:	4b82      	ldr	r3, [pc, #520]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	497e      	ldr	r1, [pc, #504]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002b96:	e049      	b.n	8002c2c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0218 	bic.w	r2, r3, #24
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4977      	ldr	r1, [pc, #476]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b76      	ldr	r3, [pc, #472]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe faef 	bl	80011a0 <HAL_GetTick>
 8002bc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe faeb 	bl	80011a0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e29d      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002be4:	4b69      	ldr	r3, [pc, #420]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4966      	ldr	r1, [pc, #408]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	610b      	str	r3, [r1, #16]
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b64      	ldr	r3, [pc, #400]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a63      	ldr	r2, [pc, #396]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe facb 	bl	80011a0 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fac7 	bl	80011a0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e279      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c20:	4b5a      	ldr	r3, [pc, #360]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b52      	ldr	r3, [pc, #328]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c46:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe faa6 	bl	80011a0 <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c58:	f7fe faa2 	bl	80011a0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e254      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c6a:	4b48      	ldr	r3, [pc, #288]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3a8>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b44      	ldr	r3, [pc, #272]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c80:	4a42      	ldr	r2, [pc, #264]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002c82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa89 	bl	80011a0 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c92:	f7fe fa85 	bl	80011a0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e237      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ca4:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80d2 	beq.w	8002e64 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cc0:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <HAL_RCC_OscConfig+0x4e4>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d118      	bne.n	8002cfe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCC_OscConfig+0x4e4>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	4a30      	ldr	r2, [pc, #192]	@ (8002d94 <HAL_RCC_OscConfig+0x4e4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fa62 	bl	80011a0 <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fa5e 	bl	80011a0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e210      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cf2:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <HAL_RCC_OscConfig+0x4e4>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x468>
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d16:	e074      	b.n	8002e02 <HAL_RCC_OscConfig+0x552>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d118      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4a2>
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d26:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d30:	4b16      	ldr	r3, [pc, #88]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d36:	4a15      	ldr	r2, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d46:	4a11      	ldr	r2, [pc, #68]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d50:	e057      	b.n	8002e02 <HAL_RCC_OscConfig+0x552>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d11e      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4e8>
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d70:	4a06      	ldr	r2, [pc, #24]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d7a:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d80:	4a02      	ldr	r2, [pc, #8]	@ (8002d8c <HAL_RCC_OscConfig+0x4dc>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x552>
 8002d8c:	44020c00 	.word	0x44020c00
 8002d90:	20000004 	.word	0x20000004
 8002d94:	44020800 	.word	0x44020800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b85      	cmp	r3, #133	@ 0x85
 8002d9e:	d118      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x522>
 8002da0:	4ba2      	ldr	r3, [pc, #648]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da6:	4aa1      	ldr	r2, [pc, #644]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002db0:	4b9e      	ldr	r3, [pc, #632]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db6:	4a9d      	ldr	r2, [pc, #628]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc6:	4a99      	ldr	r2, [pc, #612]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dd0:	e017      	b.n	8002e02 <HAL_RCC_OscConfig+0x552>
 8002dd2:	4b96      	ldr	r3, [pc, #600]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd8:	4a94      	ldr	r2, [pc, #592]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002de2:	4b92      	ldr	r3, [pc, #584]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de8:	4a90      	ldr	r2, [pc, #576]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dea:	f023 0304 	bic.w	r3, r3, #4
 8002dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002df2:	4b8e      	ldr	r3, [pc, #568]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002df8:	4a8c      	ldr	r2, [pc, #560]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f9c9 	bl	80011a0 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe f9c5 	bl	80011a0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e175      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e28:	4b80      	ldr	r3, [pc, #512]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ed      	beq.n	8002e12 <HAL_RCC_OscConfig+0x562>
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe f9b2 	bl	80011a0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe f9ae 	bl	80011a0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e15e      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e56:	4b75      	ldr	r3, [pc, #468]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ed      	bne.n	8002e40 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d036      	beq.n	8002ede <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d019      	beq.n	8002eac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e78:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6b      	ldr	r2, [pc, #428]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002e7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f98c 	bl	80011a0 <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002e8c:	f7fe f988 	bl	80011a0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e13a      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x5dc>
 8002eaa:	e018      	b.n	8002ede <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eac:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002eb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe f972 	bl	80011a0 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ec0:	f7fe f96e 	bl	80011a0 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e120      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ed2:	4b56      	ldr	r3, [pc, #344]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8115 	beq.w	8003112 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b18      	cmp	r3, #24
 8002eec:	f000 80af 	beq.w	800304e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 8086 	bne.w	8003006 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002efa:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe f94b 	bl	80011a0 <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe f947 	bl	80011a0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0f9      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f20:	4b42      	ldr	r3, [pc, #264]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f34:	f023 0303 	bic.w	r3, r3, #3
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f40:	0212      	lsls	r2, r2, #8
 8002f42:	430a      	orrs	r2, r1
 8002f44:	4939      	ldr	r1, [pc, #228]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	3b01      	subs	r3, #1
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f7a:	492c      	ldr	r1, [pc, #176]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f90:	4a26      	ldr	r2, [pc, #152]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002f96:	4b25      	ldr	r3, [pc, #148]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4a24      	ldr	r2, [pc, #144]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002f9c:	f043 0310 	orr.w	r3, r3, #16
 8002fa0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa6:	f023 020c 	bic.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	491f      	ldr	r1, [pc, #124]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	f023 0220 	bic.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc0:	491a      	ldr	r1, [pc, #104]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a15      	ldr	r2, [pc, #84]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fe f8df 	bl	80011a0 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe f8db 	bl	80011a0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e08d      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x736>
 8003004:	e085      	b.n	8003112 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_RCC_OscConfig+0x77c>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe f8c5 	bl	80011a0 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800301a:	f7fe f8c1 	bl	80011a0 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d903      	bls.n	8003030 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e073      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
 800302c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003030:	4b3a      	ldr	r3, [pc, #232]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800303c:	4b37      	ldr	r3, [pc, #220]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	4a36      	ldr	r2, [pc, #216]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003042:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	6293      	str	r3, [r2, #40]	@ 0x28
 800304c:	e061      	b.n	8003112 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800304e:	4b33      	ldr	r3, [pc, #204]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003054:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	2b01      	cmp	r3, #1
 8003060:	d031      	beq.n	80030c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d12a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d122      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d11a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	0a5b      	lsrs	r3, r3, #9
 8003094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d111      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d108      	bne.n	80030c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0e1b      	lsrs	r3, r3, #24
 80030b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e024      	b.n	8003114 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030d8:	429a      	cmp	r2, r3
 80030da:	d01a      	beq.n	8003112 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe f85a 	bl	80011a0 <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80030ee:	bf00      	nop
 80030f0:	f7fe f856 	bl	80011a0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d0f9      	beq.n	80030f0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003100:	4a06      	ldr	r2, [pc, #24]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	4a04      	ldr	r2, [pc, #16]	@ (800311c <HAL_RCC_OscConfig+0x86c>)
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	44020c00 	.word	0x44020c00

08003120 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e19e      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b83      	ldr	r3, [pc, #524]	@ (8003344 <HAL_RCC_ClockConfig+0x224>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b80      	ldr	r3, [pc, #512]	@ (8003344 <HAL_RCC_ClockConfig+0x224>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	497e      	ldr	r1, [pc, #504]	@ (8003344 <HAL_RCC_ClockConfig+0x224>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b7c      	ldr	r3, [pc, #496]	@ (8003344 <HAL_RCC_ClockConfig+0x224>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e186      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	4b74      	ldr	r3, [pc, #464]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800317e:	429a      	cmp	r2, r3
 8003180:	d909      	bls.n	8003196 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003182:	4b71      	ldr	r3, [pc, #452]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	496d      	ldr	r1, [pc, #436]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003192:	4313      	orrs	r3, r2
 8003194:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	4b68      	ldr	r3, [pc, #416]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d909      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80031b4:	4b64      	ldr	r3, [pc, #400]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	4961      	ldr	r1, [pc, #388]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80031e4:	4b58      	ldr	r3, [pc, #352]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4955      	ldr	r1, [pc, #340]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	429a      	cmp	r2, r3
 8003210:	d908      	bls.n	8003224 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003212:	4b4d      	ldr	r3, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 020f 	bic.w	r2, r3, #15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	494a      	ldr	r1, [pc, #296]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003220:	4313      	orrs	r3, r2
 8003222:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8093 	beq.w	8003358 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800323a:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e113      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003252:	4b3d      	ldr	r3, [pc, #244]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e107      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0fb      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	4b33      	ldr	r3, [pc, #204]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0f3      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	492c      	ldr	r1, [pc, #176]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003298:	4313      	orrs	r3, r2
 800329a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd ff80 	bl	80011a0 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d112      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fd ff78 	bl	80011a0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0d7      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0318 	and.w	r3, r3, #24
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	d1ee      	bne.n	80032ac <HAL_RCC_ClockConfig+0x18c>
 80032ce:	e043      	b.n	8003358 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fd ff61 	bl	80011a0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0c0      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b15      	ldr	r3, [pc, #84]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0318 	and.w	r3, r3, #24
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_ClockConfig+0x1ba>
 80032fc:	e02c      	b.n	8003358 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d122      	bne.n	800334c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd ff4a 	bl	80011a0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0a9      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_RCC_ClockConfig+0x228>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0318 	and.w	r3, r3, #24
 8003326:	2b08      	cmp	r3, #8
 8003328:	d1ee      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1e8>
 800332a:	e015      	b.n	8003358 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800332c:	f7fd ff38 	bl	80011a0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d906      	bls.n	800334c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e097      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800334c:	4b4b      	ldr	r3, [pc, #300]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 0318 	and.w	r3, r3, #24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e9      	bne.n	800332c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	4b44      	ldr	r3, [pc, #272]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	429a      	cmp	r2, r3
 8003372:	d208      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003374:	4b41      	ldr	r3, [pc, #260]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	493e      	ldr	r1, [pc, #248]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003386:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <HAL_RCC_ClockConfig+0x360>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d210      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003394:	4b3a      	ldr	r3, [pc, #232]	@ (8003480 <HAL_RCC_ClockConfig+0x360>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 020f 	bic.w	r2, r3, #15
 800339c:	4938      	ldr	r1, [pc, #224]	@ (8003480 <HAL_RCC_ClockConfig+0x360>)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a4:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <HAL_RCC_ClockConfig+0x360>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e05d      	b.n	8003472 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d010      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d208      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80033d2:	4b2a      	ldr	r3, [pc, #168]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4927      	ldr	r1, [pc, #156]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d209      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003402:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	491a      	ldr	r1, [pc, #104]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003430:	429a      	cmp	r2, r3
 8003432:	d209      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003434:	4b11      	ldr	r3, [pc, #68]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	490e      	ldr	r1, [pc, #56]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003448:	f000 f822 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490b      	ldr	r1, [pc, #44]	@ (8003484 <HAL_RCC_ClockConfig+0x364>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <HAL_RCC_ClockConfig+0x368>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_RCC_ClockConfig+0x36c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fe10 	bl	800108c <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003470:	7afb      	ldrb	r3, [r7, #11]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	44020c00 	.word	0x44020c00
 8003480:	40022000 	.word	0x40022000
 8003484:	08006938 	.word	0x08006938
 8003488:	20000000 	.word	0x20000000
 800348c:	20000004 	.word	0x20000004

08003490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	@ 0x24
 8003494:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003496:	4b8c      	ldr	r3, [pc, #560]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0318 	and.w	r3, r3, #24
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034a2:	4b8a      	ldr	r3, [pc, #552]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x23c>)
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e107      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a8:	4b87      	ldr	r3, [pc, #540]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f003 0318 	and.w	r3, r3, #24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d112      	bne.n	80034da <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80034b4:	4b84      	ldr	r3, [pc, #528]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034c0:	4b81      	ldr	r3, [pc, #516]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	4a81      	ldr	r2, [pc, #516]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e0f1      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80034d4:	4b7e      	ldr	r3, [pc, #504]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	e0ee      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034da:	4b7b      	ldr	r3, [pc, #492]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0318 	and.w	r3, r3, #24
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e6:	4b7b      	ldr	r3, [pc, #492]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x244>)
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e0e5      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ec:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 0318 	and.w	r3, r3, #24
 80034f4:	2b18      	cmp	r3, #24
 80034f6:	f040 80dd 	bne.w	80036b4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80034fa:	4b73      	ldr	r3, [pc, #460]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003504:	4b70      	ldr	r3, [pc, #448]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800350e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003510:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800351c:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003534:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80b7 	beq.w	80036ae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0xbe>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d056      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x16a>
 800354c:	e077      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800354e:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02d      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800355a:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	08db      	lsrs	r3, r3, #3
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	4a5a      	ldr	r2, [pc, #360]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003594:	ed97 6a02 	vldr	s12, [r7, #8]
 8003598:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x248>
 800359c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80035a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80035b4:	e065      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80036dc <HAL_RCC_GetSysClockFreq+0x24c>
 80035c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c8:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035dc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x248>
 80035e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80035f8:	e043      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003604:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x250>
 8003608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360c:	4b2e      	ldr	r3, [pc, #184]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 800360e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800361c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003620:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003624:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003628:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800362c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003630:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003638:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800363c:	e021      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003648:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x254>
 800364c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003650:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003660:	ed97 6a02 	vldr	s12, [r7, #8]
 8003664:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80036d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003668:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800366c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003674:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003680:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003682:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003686:	0a5b      	lsrs	r3, r3, #9
 8003688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800368c:	3301      	adds	r3, #1
 800368e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800369a:	edd7 6a06 	vldr	s13, [r7, #24]
 800369e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a6:	ee17 3a90 	vmov	r3, s15
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e004      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e001      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x240>)
 80036b6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80036b8:	69fb      	ldr	r3, [r7, #28]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	44020c00 	.word	0x44020c00
 80036cc:	003d0900 	.word	0x003d0900
 80036d0:	03d09000 	.word	0x03d09000
 80036d4:	017d7840 	.word	0x017d7840
 80036d8:	46000000 	.word	0x46000000
 80036dc:	4c742400 	.word	0x4c742400
 80036e0:	4bbebc20 	.word	0x4bbebc20
 80036e4:	4a742400 	.word	0x4a742400

080036e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80036ec:	f7ff fed0 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <HAL_RCC_GetHCLKFreq+0x2c>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80036f6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80036fa:	4907      	ldr	r1, [pc, #28]	@ (8003718 <HAL_RCC_GetHCLKFreq+0x30>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80036fe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a05      	ldr	r2, [pc, #20]	@ (800371c <HAL_RCC_GetHCLKFreq+0x34>)
 8003708:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800370a:	4b04      	ldr	r3, [pc, #16]	@ (800371c <HAL_RCC_GetHCLKFreq+0x34>)
 800370c:	681b      	ldr	r3, [r3, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	44020c00 	.word	0x44020c00
 8003718:	08006938 	.word	0x08006938
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0d8      	sub	sp, #352	@ 0x160
 8003726:	af00      	add	r7, sp, #0
 8003728:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800372c:	2300      	movs	r3, #0
 800372e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003732:	2300      	movs	r3, #0
 8003734:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003744:	2500      	movs	r5, #0
 8003746:	ea54 0305 	orrs.w	r3, r4, r5
 800374a:	d00b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800374c:	4bcd      	ldr	r3, [pc, #820]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800374e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003752:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	4ac9      	ldr	r2, [pc, #804]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800375e:	430b      	orrs	r3, r1
 8003760:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 0801 	and.w	r8, r2, #1
 8003770:	f04f 0900 	mov.w	r9, #0
 8003774:	ea58 0309 	orrs.w	r3, r8, r9
 8003778:	d042      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800377a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	2b05      	cmp	r3, #5
 8003782:	d823      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037d5 	.word	0x080037d5
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037d5 	.word	0x080037d5
 800379c:	080037d5 	.word	0x080037d5
 80037a0:	080037d5 	.word	0x080037d5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037a8:	3308      	adds	r3, #8
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 ff42 	bl	8005634 <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80037b6:	e00e      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037bc:	3330      	adds	r3, #48	@ 0x30
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 ffd0 	bl	8005764 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80037de:	4ba9      	ldr	r3, [pc, #676]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80037e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e4:	f023 0107 	bic.w	r1, r3, #7
 80037e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	4aa5      	ldr	r2, [pc, #660]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037f6:	e003      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f002 0a02 	and.w	sl, r2, #2
 800380c:	f04f 0b00 	mov.w	fp, #0
 8003810:	ea5a 030b 	orrs.w	r3, sl, fp
 8003814:	f000 8088 	beq.w	8003928 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	2b28      	cmp	r3, #40	@ 0x28
 8003820:	d868      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003822:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	080038fd 	.word	0x080038fd
 800382c:	080038f5 	.word	0x080038f5
 8003830:	080038f5 	.word	0x080038f5
 8003834:	080038f5 	.word	0x080038f5
 8003838:	080038f5 	.word	0x080038f5
 800383c:	080038f5 	.word	0x080038f5
 8003840:	080038f5 	.word	0x080038f5
 8003844:	080038f5 	.word	0x080038f5
 8003848:	080038cd 	.word	0x080038cd
 800384c:	080038f5 	.word	0x080038f5
 8003850:	080038f5 	.word	0x080038f5
 8003854:	080038f5 	.word	0x080038f5
 8003858:	080038f5 	.word	0x080038f5
 800385c:	080038f5 	.word	0x080038f5
 8003860:	080038f5 	.word	0x080038f5
 8003864:	080038f5 	.word	0x080038f5
 8003868:	080038e1 	.word	0x080038e1
 800386c:	080038f5 	.word	0x080038f5
 8003870:	080038f5 	.word	0x080038f5
 8003874:	080038f5 	.word	0x080038f5
 8003878:	080038f5 	.word	0x080038f5
 800387c:	080038f5 	.word	0x080038f5
 8003880:	080038f5 	.word	0x080038f5
 8003884:	080038f5 	.word	0x080038f5
 8003888:	080038fd 	.word	0x080038fd
 800388c:	080038f5 	.word	0x080038f5
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080038f5 	.word	0x080038f5
 8003898:	080038f5 	.word	0x080038f5
 800389c:	080038f5 	.word	0x080038f5
 80038a0:	080038f5 	.word	0x080038f5
 80038a4:	080038f5 	.word	0x080038f5
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038f5 	.word	0x080038f5
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038fd 	.word	0x080038fd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d0:	3308      	adds	r3, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 feae 	bl	8005634 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80038de:	e00e      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038e4:	3330      	adds	r3, #48	@ 0x30
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 ff3c 	bl	8005764 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003906:	4b5f      	ldr	r3, [pc, #380]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800390c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	4a5b      	ldr	r2, [pc, #364]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003918:	430b      	orrs	r3, r1
 800391a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800391e:	e003      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003924:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f002 0304 	and.w	r3, r2, #4
 8003934:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800393e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d04e      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800394c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800394e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003952:	d02c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003954:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003958:	d825      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800395a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395e:	d028      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003964:	d81f      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003966:	2bc0      	cmp	r3, #192	@ 0xc0
 8003968:	d025      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800396a:	2bc0      	cmp	r3, #192	@ 0xc0
 800396c:	d81b      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d00f      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003972:	2b80      	cmp	r3, #128	@ 0x80
 8003974:	d817      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01f      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d113      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800397e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003982:	3308      	adds	r3, #8
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fe55 	bl	8005634 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003990:	e014      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003996:	3330      	adds	r3, #48	@ 0x30
 8003998:	4618      	mov	r0, r3
 800399a:	f001 fee3 	bl	8005764 <RCCEx_PLL3_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80039a4:	e00a      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ac:	e006      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80039ae:	bf00      	nop
 80039b0:	e004      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80039ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80039c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80039c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ca:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f002 0308 	and.w	r3, r2, #8
 80039f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80039fc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003a00:	460b      	mov	r3, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	d056      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a10:	d031      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003a12:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a16:	d82a      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a1c:	d02d      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a22:	d824      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a28:	d029      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003a2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a2e:	d81e      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d011      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3a:	d818      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d023      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a44:	d113      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 fdf1 	bl	8005634 <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003a58:	e017      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a5e:	3330      	adds	r3, #48	@ 0x30
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fe7f 	bl	8005764 <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003a6c:	e00d      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a74:	e009      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003a76:	bf00      	nop
 8003a78:	e007      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003a82:	bf00      	nop
 8003a84:	44020c00 	.word	0x44020c00
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a92:	4bbb      	ldr	r3, [pc, #748]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a98:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aa2:	4ab7      	ldr	r2, [pc, #732]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003aaa:	e003      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ab0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0310 	and.w	r3, r2, #16
 8003ac0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003aca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d053      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ada:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ade:	d031      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003ae0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aea:	d02d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af0:	d824      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003af2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003af6:	d029      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003af8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003afc:	d81e      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b02:	d011      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b08:	d818      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d113      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b18:	3308      	adds	r3, #8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fd8a 	bl	8005634 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003b26:	e014      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b2c:	3330      	adds	r3, #48	@ 0x30
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fe18 	bl	8005764 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b42:	e006      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003b44:	bf00      	nop
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003b48:	bf00      	nop
 8003b4a:	e002      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003b4c:	bf00      	nop
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b5a:	4b89      	ldr	r3, [pc, #548]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6a:	4a85      	ldr	r2, [pc, #532]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f002 0320 	and.w	r3, r2, #32
 8003b88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003b92:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d053      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003ba6:	d031      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003ba8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003bac:	d82a      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb2:	d02d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb8:	d824      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003bba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003bbe:	d029      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003bc0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003bc4:	d81e      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bca:	d011      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d818      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d020      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bda:	d113      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003be0:	3308      	adds	r3, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fd26 	bl	8005634 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003bee:	e014      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf4:	3330      	adds	r3, #48	@ 0x30
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 fdb4 	bl	8005764 <RCCEx_PLL3_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003c02:	e00a      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c0a:	e006      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c0c:	bf00      	nop
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003c22:	4b57      	ldr	r3, [pc, #348]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c28:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a53      	ldr	r2, [pc, #332]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003c5a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d053      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c6e:	d031      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003c70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003c74:	d82a      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	d02d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c80:	d824      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003c82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c86:	d029      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003c88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c8c:	d81e      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003c8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c92:	d011      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003c94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c98:	d818      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ca2:	d113      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca8:	3308      	adds	r3, #8
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fcc2 	bl	8005634 <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cbc:	3330      	adds	r3, #48	@ 0x30
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fd50 	bl	8005764 <RCCEx_PLL3_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cd2:	e006      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003cea:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cf0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfa:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d22:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d055      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003d36:	d033      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003d38:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003d3c:	d82c      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d42:	d02f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003d44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d48:	d826      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d4e:	d02b      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003d50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d54:	d820      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d60:	d81a      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d022      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d6a:	d115      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d70:	3308      	adds	r3, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 fc5e 	bl	8005634 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003d7e:	e016      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003d80:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d88:	3330      	adds	r3, #48	@ 0x30
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 fcea 	bl	8005764 <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003d96:	e00a      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d9e:	e006      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003da0:	bf00      	nop
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003db6:	4bbb      	ldr	r3, [pc, #748]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dbc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc6:	4ab7      	ldr	r2, [pc, #732]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003de4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003dee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d053      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dfe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003e02:	d031      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003e04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003e08:	d82a      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e0e:	d02d      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003e10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e14:	d824      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e1a:	d029      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003e1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e20:	d81e      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e26:	d011      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e2c:	d818      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e36:	d113      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fbf8 	bl	8005634 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003e4a:	e014      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e50:	3330      	adds	r3, #48	@ 0x30
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 fc86 	bl	8005764 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e66:	e006      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003e68:	bf00      	nop
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003e7e:	4b89      	ldr	r3, [pc, #548]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e8e:	4a85      	ldr	r2, [pc, #532]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003eac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003eb6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d055      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ec8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003ecc:	d031      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003ece:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003ed2:	d82a      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed8:	d02d      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ede:	d824      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003ee0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003ee4:	d029      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003ee6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003eea:	d81e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef0:	d011      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef6:	d818      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f00:	d113      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f06:	3308      	adds	r3, #8
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 fb93 	bl	8005634 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003f14:	e014      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f1a:	3330      	adds	r3, #48	@ 0x30
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fc21 	bl	8005764 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003f28:	e00a      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f30:	e006      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003f32:	bf00      	nop
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003f48:	4b56      	ldr	r3, [pc, #344]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f4e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f5a:	4a52      	ldr	r2, [pc, #328]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f82:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d044      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d823      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fe9 	.word	0x08003fe9
 8003fa4:	08003fb9 	.word	0x08003fb9
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08003fe9 	.word	0x08003fe9
 8003fb4:	08003fe9 	.word	0x08003fe9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fb38 	bl	8005634 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003fca:	e00e      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fd0:	3330      	adds	r3, #48	@ 0x30
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 fbc6 	bl	8005764 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003ff4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ff8:	f023 0107 	bic.w	r1, r3, #7
 8003ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004004:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004006:	430b      	orrs	r3, r1
 8004008:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004012:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004022:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800402c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d04f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	2b50      	cmp	r3, #80	@ 0x50
 8004040:	d029      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004042:	2b50      	cmp	r3, #80	@ 0x50
 8004044:	d823      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d027      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d81f      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800404e:	2b30      	cmp	r3, #48	@ 0x30
 8004050:	d025      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004052:	2b30      	cmp	r3, #48	@ 0x30
 8004054:	d81b      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004056:	2b20      	cmp	r3, #32
 8004058:	d00f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800405a:	2b20      	cmp	r3, #32
 800405c:	d817      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d022      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004062:	2b10      	cmp	r3, #16
 8004064:	d113      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800406a:	3308      	adds	r3, #8
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fae1 	bl	8005634 <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004078:	e017      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800407a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800407e:	3330      	adds	r3, #48	@ 0x30
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fb6f 	bl	8005764 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800408c:	e00d      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004094:	e009      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004096:	bf00      	nop
 8004098:	e007      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800409a:	bf00      	nop
 800409c:	e005      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800409e:	bf00      	nop
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80040a2:	bf00      	nop
 80040a4:	44020c00 	.word	0x44020c00
        break;
 80040a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80040b2:	4baf      	ldr	r3, [pc, #700]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80040b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040b8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	4aaa      	ldr	r2, [pc, #680]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80040c6:	430b      	orrs	r3, r1
 80040c8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d055      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80040f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004102:	d031      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004104:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004108:	d82a      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800410a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800410e:	d02d      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004114:	d824      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800411a:	d029      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800411c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004120:	d81e      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004126:	d011      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800412c:	d818      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004136:	d113      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800413c:	3308      	adds	r3, #8
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fa78 	bl	8005634 <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800414a:	e014      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800414c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004150:	3330      	adds	r3, #48	@ 0x30
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fb06 	bl	8005764 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800415e:	e00a      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004166:	e006      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004168:	bf00      	nop
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800417e:	4b7c      	ldr	r3, [pc, #496]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004184:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	4a77      	ldr	r2, [pc, #476]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004192:	430b      	orrs	r3, r1
 8004194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800419e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d03d      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80041c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041ce:	d01b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80041d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041d4:	d814      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80041d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041da:	d017      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80041dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e0:	d80e      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ea:	d109      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f0:	3330      	adds	r3, #48	@ 0x30
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fab6 	bl	8005764 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004208:	bf00      	nop
 800420a:	e002      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800421a:	4b55      	ldr	r3, [pc, #340]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800421c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004220:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	4a50      	ldr	r2, [pc, #320]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800422e:	430b      	orrs	r3, r1
 8004230:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800423a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800424a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004254:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d03d      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800425e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004266:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800426a:	d01b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800426c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004270:	d814      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004272:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004276:	d017      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800427c:	d80e      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d014      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004286:	d109      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800428c:	3330      	adds	r3, #48	@ 0x30
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fa68 	bl	8005764 <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800429a:	e008      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042a2:	e004      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80042a4:	bf00      	nop
 80042a6:	e002      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80042ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80042b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80042b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042bc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80042c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c8:	4a29      	ldr	r2, [pc, #164]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d040      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80042fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004302:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004306:	d01b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004308:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800430c:	d814      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800430e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004312:	d017      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004314:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004318:	d80e      	bhi.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d014      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004322:	d109      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004328:	3330      	adds	r3, #48	@ 0x30
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fa1a 	bl	8005764 <RCCEx_PLL3_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004336:	e008      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800433e:	e004      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004340:	bf00      	nop
 8004342:	e002      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004344:	bf00      	nop
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800434e:	2b00      	cmp	r3, #0
 8004350:	d110      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004352:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004354:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004358:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800435c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004360:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004364:	4a02      	ldr	r2, [pc, #8]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004366:	430b      	orrs	r3, r1
 8004368:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800436e:	bf00      	nop
 8004370:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004378:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	2100      	movs	r1, #0
 8004386:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d03d      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800439c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043a8:	d01b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80043aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043ae:	d814      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80043b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043b4:	d017      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80043b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ba:	d80e      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d014      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ca:	3330      	adds	r3, #48	@ 0x30
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 f9c9 	bl	8005764 <RCCEx_PLL3_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80043f4:	4bbe      	ldr	r3, [pc, #760]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80043f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004406:	4aba      	ldr	r2, [pc, #744]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004408:	430b      	orrs	r3, r1
 800440a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004414:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004424:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800442e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d035      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800443c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004444:	d015      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800444a:	d80e      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d012      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004454:	d109      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800445a:	3330      	adds	r3, #48	@ 0x30
 800445c:	4618      	mov	r0, r3
 800445e:	f001 f981 	bl	8005764 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004470:	e002      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004478:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10d      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004480:	4b9b      	ldr	r3, [pc, #620]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004486:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800448a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800448e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004492:	4a97      	ldr	r2, [pc, #604]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004494:	430b      	orrs	r3, r1
 8004496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	2100      	movs	r1, #0
 80044ae:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80044b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044be:	460b      	mov	r3, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80044c4:	4b8a      	ldr	r3, [pc, #552]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4a89      	ldr	r2, [pc, #548]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044ce:	61d3      	str	r3, [r2, #28]
 80044d0:	4b87      	ldr	r3, [pc, #540]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044dc:	4a84      	ldr	r2, [pc, #528]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044de:	430b      	orrs	r3, r1
 80044e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044fc:	460b      	mov	r3, r1
 80044fe:	4313      	orrs	r3, r2
 8004500:	d055      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004502:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800450a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800450e:	d031      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004510:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004514:	d82a      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451a:	d02d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004520:	d824      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004526:	d029      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452c:	d81e      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800452e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004538:	d818      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800453e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004542:	d113      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004544:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004548:	3308      	adds	r3, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f872 	bl	8005634 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004556:	e014      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800455c:	3330      	adds	r3, #48	@ 0x30
 800455e:	4618      	mov	r0, r3
 8004560:	f001 f900 	bl	8005764 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800456a:	e00a      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800458a:	4b59      	ldr	r3, [pc, #356]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800458c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004590:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800459c:	4a54      	ldr	r2, [pc, #336]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d055      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80045ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045da:	d031      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80045dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045e0:	d82a      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80045e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e6:	d02d      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80045e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ec:	d824      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80045ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045f2:	d029      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80045f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045f8:	d81e      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fe:	d011      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004604:	d818      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d020      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460e:	d113      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004614:	3308      	adds	r3, #8
 8004616:	4618      	mov	r0, r3
 8004618:	f001 f80c 	bl	8005634 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004622:	e014      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004628:	3330      	adds	r3, #48	@ 0x30
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f89a 	bl	8005764 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800463e:	e006      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004640:	bf00      	nop
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004656:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004658:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800465c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004664:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004668:	4a21      	ldr	r2, [pc, #132]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800466a:	430b      	orrs	r3, r1
 800466c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004676:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800467a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	2100      	movs	r1, #0
 8004684:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d057      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800469a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800469e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a6:	d033      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80046a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ac:	d82c      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80046ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046b2:	d02f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80046b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046b8:	d826      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80046ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046be:	d02b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80046c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046c4:	d820      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80046c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ca:	d013      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046d0:	d81a      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d022      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046da:	d115      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046e0:	3308      	adds	r3, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 ffa6 	bl	8005634 <RCCEx_PLL2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80046ee:	e016      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80046f0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046f8:	3330      	adds	r3, #48	@ 0x30
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f832 	bl	8005764 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004706:	e00a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800470e:	e006      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004710:	bf00      	nop
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004726:	4bbb      	ldr	r3, [pc, #748]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004728:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800472c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004738:	4ab6      	ldr	r2, [pc, #728]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800473a:	430b      	orrs	r3, r1
 800473c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004746:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800474a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	2100      	movs	r1, #0
 8004754:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004760:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d055      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800476a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800476e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004772:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004776:	d031      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004778:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800477c:	d82a      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800477e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004782:	d02d      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004788:	d824      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800478a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800478e:	d029      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004790:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004794:	d81e      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479a:	d011      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800479c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a0:	d818      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80047a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047aa:	d113      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047b0:	3308      	adds	r3, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff3e 	bl	8005634 <RCCEx_PLL2_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80047be:	e014      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c4:	3330      	adds	r3, #48	@ 0x30
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 ffcc 	bl	8005764 <RCCEx_PLL3_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80047d2:	e00a      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80047dc:	bf00      	nop
 80047de:	e004      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80047e0:	bf00      	nop
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80047e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80047f2:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80047f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047f8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80047fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004804:	4a83      	ldr	r2, [pc, #524]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004806:	430b      	orrs	r3, r1
 8004808:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004812:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004816:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	2100      	movs	r1, #0
 8004820:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800482c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d055      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004836:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800483a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800483e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004842:	d031      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004844:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004848:	d82a      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800484a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800484e:	d02d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004854:	d824      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004856:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800485a:	d029      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800485c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004860:	d81e      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004866:	d011      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800486c:	d818      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004876:	d113      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800487c:	3308      	adds	r3, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fed8 	bl	8005634 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800488a:	e014      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004890:	3330      	adds	r3, #48	@ 0x30
 8004892:	4618      	mov	r0, r3
 8004894:	f000 ff66 	bl	8005764 <RCCEx_PLL3_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800489e:	e00a      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048a6:	e006      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80048a8:	bf00      	nop
 80048aa:	e004      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80048ac:	bf00      	nop
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80048b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80048be:	4b55      	ldr	r3, [pc, #340]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80048c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80048c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048d0:	4a50      	ldr	r2, [pc, #320]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80048e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d055      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004902:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004906:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800490a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800490e:	d031      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004914:	d82a      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d02d      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004920:	d824      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004926:	d029      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004928:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800492c:	d81e      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800492e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004932:	d011      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004938:	d818      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d020      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800493e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004942:	d113      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004948:	3308      	adds	r3, #8
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fe72 	bl	8005634 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004956:	e014      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004958:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800495c:	3330      	adds	r3, #48	@ 0x30
 800495e:	4618      	mov	r0, r3
 8004960:	f000 ff00 	bl	8005764 <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800496a:	e00a      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004974:	bf00      	nop
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800498a:	4b22      	ldr	r3, [pc, #136]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800498c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004990:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004994:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004998:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80049ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d055      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80049ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049da:	d035      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80049dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049e0:	d82e      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80049e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049e6:	d031      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80049e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049ec:	d828      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80049ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f2:	d01b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f8:	d822      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a02:	d009      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004a04:	e01c      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a06:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	4a02      	ldr	r2, [pc, #8]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a10:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a12:	e01c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004a14:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fe08 	bl	8005634 <RCCEx_PLL2_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a2a:	e010      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a30:	3330      	adds	r3, #48	@ 0x30
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fe96 	bl	8005764 <RCCEx_PLL3_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a3e:	e006      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004a56:	4bc3      	ldr	r3, [pc, #780]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a68:	4abe      	ldr	r2, [pc, #760]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d051      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa6:	d033      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aac:	d82c      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004aae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004ab2:	d02d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004ab4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004ab8:	d826      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004abe:	d019      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac4:	d820      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004aca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ace:	d007      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004ad0:	e01a      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad2:	4ba4      	ldr	r3, [pc, #656]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	4aa3      	ldr	r2, [pc, #652]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004adc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ade:	e018      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fda4 	bl	8005634 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004af2:	e00e      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af8:	3330      	adds	r3, #48	@ 0x30
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fe32 	bl	8005764 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b06:	e004      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004b1a:	4b92      	ldr	r3, [pc, #584]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b20:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d032      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d80f      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d211      	bcs.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d911      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d109      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b76:	3308      	adds	r3, #8
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fd5b 	bl	8005634 <RCCEx_PLL2_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004b9c:	4b71      	ldr	r3, [pc, #452]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ba2:	f023 0107 	bic.w	r1, r3, #7
 8004ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004baa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004bae:	4a6d      	ldr	r2, [pc, #436]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6739      	str	r1, [r7, #112]	@ 0x70
 8004bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bd2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d024      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004c02:	4b58      	ldr	r3, [pc, #352]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c08:	f023 0108 	bic.w	r1, r3, #8
 8004c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c14:	4a53      	ldr	r2, [pc, #332]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c34:	2300      	movs	r3, #0
 8004c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f000 80b9 	beq.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004c44:	4b48      	ldr	r3, [pc, #288]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	4a47      	ldr	r2, [pc, #284]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c50:	f7fc faa6 	bl	80011a0 <HAL_GetTick>
 8004c54:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004c58:	e00b      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5a:	f7fc faa1 	bl	80011a0 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d903      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c70:	e005      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004c72:	4b3d      	ldr	r3, [pc, #244]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ed      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 8093 	bne.w	8004dae <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c88:	4b36      	ldr	r3, [pc, #216]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004c96:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d023      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004ca6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cae:	4b2d      	ldr	r3, [pc, #180]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cbc:	4b29      	ldr	r3, [pc, #164]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cc2:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ccc:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cdc:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004cde:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d019      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fa55 	bl	80011a0 <HAL_GetTick>
 8004cf6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	e00d      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fa50 	bl	80011a0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d903      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004d16:	e006      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d18:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0ea      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004d26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d13a      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d32:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d3e:	d115      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004d40:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d56:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004d5a:	4a02      	ldr	r2, [pc, #8]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	61d3      	str	r3, [r2, #28]
 8004d60:	e00a      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004d62:	bf00      	nop
 8004d64:	44020c00 	.word	0x44020c00
 8004d68:	44020800 	.word	0x44020800
 8004d6c:	4b9f      	ldr	r3, [pc, #636]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	4a9e      	ldr	r2, [pc, #632]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d72:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d76:	61d3      	str	r3, [r2, #28]
 8004d78:	4b9c      	ldr	r3, [pc, #624]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d7e:	4a9b      	ldr	r2, [pc, #620]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d88:	4b98      	ldr	r3, [pc, #608]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d8a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d92:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9a:	4a94      	ldr	r2, [pc, #592]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004da8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004db2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d035      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004dda:	2b30      	cmp	r3, #48	@ 0x30
 8004ddc:	d014      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004dde:	2b30      	cmp	r3, #48	@ 0x30
 8004de0:	d80e      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d012      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d80a      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d106      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df2:	4b7e      	ldr	r3, [pc, #504]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004dfe:	e008      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e06:	e004      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e002      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004e0c:	bf00      	nop
 8004e0e:	e000      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004e1a:	4b74      	ldr	r3, [pc, #464]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004e2c:	4a6f      	ldr	r2, [pc, #444]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d033      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d007      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004e6a:	e010      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	4a5e      	ldr	r2, [pc, #376]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e76:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004e78:	e00d      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7e:	3308      	adds	r3, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fbd7 	bl	8005634 <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004e8c:	e003      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10d      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004e9e:	4b53      	ldr	r3, [pc, #332]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ea0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ea4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004eb0:	4a4e      	ldr	r2, [pc, #312]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ebe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4313      	orrs	r3, r2
 8004edc:	d033      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004ede:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004eea:	2b80      	cmp	r3, #128	@ 0x80
 8004eec:	d007      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004eee:	e010      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004efc:	e00d      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f02:	3308      	adds	r3, #8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fb95 	bl	8005634 <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004f22:	4b32      	ldr	r3, [pc, #200]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f28:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004f34:	4a2d      	ldr	r2, [pc, #180]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f54:	2300      	movs	r3, #0
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d04a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d827      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f89 	.word	0x08004f89
 8004f78:	08004f97 	.word	0x08004f97
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fc7 	.word	0x08004fc7
 8004f84:	08004fc7 	.word	0x08004fc7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f88:	4b18      	ldr	r3, [pc, #96]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004f94:	e018      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb49 	bl	8005634 <RCCEx_PLL2_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fa8:	e00e      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fae:	3330      	adds	r3, #48	@ 0x30
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fbd7 	bl	8005764 <RCCEx_PLL3_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10f      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004fd0:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fd6:	f023 0107 	bic.w	r1, r3, #7
 8004fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe2:	4a02      	ldr	r2, [pc, #8]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004fea:	e005      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004fec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ff4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005004:	643b      	str	r3, [r7, #64]	@ 0x40
 8005006:	2300      	movs	r3, #0
 8005008:	647b      	str	r3, [r7, #68]	@ 0x44
 800500a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	f000 8081 	beq.w	8005118 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800501a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800501e:	2b20      	cmp	r3, #32
 8005020:	d85f      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005022:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050e3 	.word	0x080050e3
 8005030:	080050e3 	.word	0x080050e3
 8005034:	080050e3 	.word	0x080050e3
 8005038:	080050e3 	.word	0x080050e3
 800503c:	080050e3 	.word	0x080050e3
 8005040:	080050e3 	.word	0x080050e3
 8005044:	080050e3 	.word	0x080050e3
 8005048:	080050bb 	.word	0x080050bb
 800504c:	080050e3 	.word	0x080050e3
 8005050:	080050e3 	.word	0x080050e3
 8005054:	080050e3 	.word	0x080050e3
 8005058:	080050e3 	.word	0x080050e3
 800505c:	080050e3 	.word	0x080050e3
 8005060:	080050e3 	.word	0x080050e3
 8005064:	080050e3 	.word	0x080050e3
 8005068:	080050cf 	.word	0x080050cf
 800506c:	080050e3 	.word	0x080050e3
 8005070:	080050e3 	.word	0x080050e3
 8005074:	080050e3 	.word	0x080050e3
 8005078:	080050e3 	.word	0x080050e3
 800507c:	080050e3 	.word	0x080050e3
 8005080:	080050e3 	.word	0x080050e3
 8005084:	080050e3 	.word	0x080050e3
 8005088:	080050eb 	.word	0x080050eb
 800508c:	080050e3 	.word	0x080050e3
 8005090:	080050e3 	.word	0x080050e3
 8005094:	080050e3 	.word	0x080050e3
 8005098:	080050e3 	.word	0x080050e3
 800509c:	080050e3 	.word	0x080050e3
 80050a0:	080050e3 	.word	0x080050e3
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050eb 	.word	0x080050eb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ac:	4bab      	ldr	r3, [pc, #684]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	4aaa      	ldr	r2, [pc, #680]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050b8:	e018      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050be:	3308      	adds	r3, #8
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fab7 	bl	8005634 <RCCEx_PLL2_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050cc:	e00e      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d2:	3330      	adds	r3, #48	@ 0x30
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fb45 	bl	8005764 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80050ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80050f4:	4b99      	ldr	r3, [pc, #612]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80050fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005106:	4a95      	ldr	r2, [pc, #596]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005108:	430b      	orrs	r3, r1
 800510a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800510e:	e003      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005114:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005126:	2300      	movs	r3, #0
 8005128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800512a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800512e:	460b      	mov	r3, r1
 8005130:	4313      	orrs	r3, r2
 8005132:	d04e      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800513c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005140:	d02e      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d827      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005148:	2bc0      	cmp	r3, #192	@ 0xc0
 800514a:	d02b      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800514c:	2bc0      	cmp	r3, #192	@ 0xc0
 800514e:	d823      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005150:	2b80      	cmp	r3, #128	@ 0x80
 8005152:	d017      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005154:	2b80      	cmp	r3, #128	@ 0x80
 8005156:	d81f      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800515c:	2b40      	cmp	r3, #64	@ 0x40
 800515e:	d007      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005160:	e01a      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005162:	4b7e      	ldr	r3, [pc, #504]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	4a7d      	ldr	r2, [pc, #500]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800516e:	e01a      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005174:	3308      	adds	r3, #8
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fa5c 	bl	8005634 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005182:	e010      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005188:	3330      	adds	r3, #48	@ 0x30
 800518a:	4618      	mov	r0, r3
 800518c:	f000 faea 	bl	8005764 <RCCEx_PLL3_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005196:	e006      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800519e:	e002      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80051ae:	4b6b      	ldr	r3, [pc, #428]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80051b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80051b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051c0:	4a66      	ldr	r2, [pc, #408]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80051d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051de:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e0:	2300      	movs	r3, #0
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051e8:	460b      	mov	r3, r1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d055      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80051ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80051f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80051fa:	d031      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80051fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005200:	d82a      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005206:	d02d      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800520c:	d824      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800520e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005212:	d029      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005214:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005218:	d81e      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d011      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005224:	d818      	bhi.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d020      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800522a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522e:	d113      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005234:	3308      	adds	r3, #8
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f9fc 	bl	8005634 <RCCEx_PLL2_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005242:	e014      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005248:	3330      	adds	r3, #48	@ 0x30
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa8a 	bl	8005764 <RCCEx_PLL3_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005256:	e00a      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800525e:	e006      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005260:	bf00      	nop
 8005262:	e004      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800526c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005276:	4b39      	ldr	r3, [pc, #228]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800527c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005284:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005288:	4a34      	ldr	r2, [pc, #208]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800528a:	430b      	orrs	r3, r1
 800528c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005296:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800529a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a8:	2300      	movs	r3, #0
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d058      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80052b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052c2:	d031      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80052c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052c8:	d82a      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80052ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ce:	d02d      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80052d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052d4:	d824      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80052d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052da:	d029      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80052dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052e0:	d81e      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	d011      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ec:	d818      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f6:	d113      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052fc:	3308      	adds	r3, #8
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f998 	bl	8005634 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800530a:	e014      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800530c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005310:	3330      	adds	r3, #48	@ 0x30
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fa26 	bl	8005764 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800531e:	e00a      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005326:	e006      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005328:	bf00      	nop
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800532c:	bf00      	nop
 800532e:	e002      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005336:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800533a:	2b00      	cmp	r3, #0
 800533c:	d110      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800533e:	4b07      	ldr	r3, [pc, #28]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005344:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800534c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005350:	4902      	ldr	r1, [pc, #8]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800535a:	bf00      	nop
 800535c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005364:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	2100      	movs	r1, #0
 8005372:	6239      	str	r1, [r7, #32]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d055      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800538c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005390:	d031      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005392:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005396:	d82a      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800539c:	d02d      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800539e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053a2:	d824      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80053a4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80053a8:	d029      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80053aa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80053ae:	d81e      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b4:	d011      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ba:	d818      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80053c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c4:	d113      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ca:	3308      	adds	r3, #8
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f931 	bl	8005634 <RCCEx_PLL2_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053d8:	e014      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053de:	3330      	adds	r3, #48	@ 0x30
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9bf 	bl	8005764 <RCCEx_PLL3_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053ec:	e00a      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10d      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800540c:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005412:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005416:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800541a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800541e:	4984      	ldr	r1, [pc, #528]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005426:	e003      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800542c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	2100      	movs	r1, #0
 800543a:	61b9      	str	r1, [r7, #24]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d03d      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800544c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005454:	2b03      	cmp	r3, #3
 8005456:	d81c      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	0800549b 	.word	0x0800549b
 8005464:	08005471 	.word	0x08005471
 8005468:	0800547f 	.word	0x0800547f
 800546c:	0800549b 	.word	0x0800549b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005470:	4b6f      	ldr	r3, [pc, #444]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	4a6e      	ldr	r2, [pc, #440]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800547a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800547c:	e00e      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800547e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005482:	3308      	adds	r3, #8
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f8d5 	bl	8005634 <RCCEx_PLL2_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800549a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80054a4:	4b62      	ldr	r3, [pc, #392]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80054a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054aa:	f023 0203 	bic.w	r2, r3, #3
 80054ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054b6:	495e      	ldr	r1, [pc, #376]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80054be:	e003      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	2100      	movs	r1, #0
 80054d2:	6139      	str	r1, [r7, #16]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d03a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80054e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f0:	d00e      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80054f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f6:	d815      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d017      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80054fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005500:	d110      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005502:	4b4b      	ldr	r3, [pc, #300]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	4a4a      	ldr	r2, [pc, #296]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800550e:	e00e      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005514:	3308      	adds	r3, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f88c 	bl	8005634 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005536:	4b3e      	ldr	r3, [pc, #248]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800553c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005548:	4939      	ldr	r1, [pc, #228]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005550:	e003      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005556:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800555a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	2100      	movs	r1, #0
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d038      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800557a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d01b      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005582:	2b30      	cmp	r3, #48	@ 0x30
 8005584:	d815      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005586:	2b10      	cmp	r3, #16
 8005588:	d002      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800558a:	2b20      	cmp	r3, #32
 800558c:	d007      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800558e:	e010      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005590:	4b27      	ldr	r3, [pc, #156]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	4a26      	ldr	r2, [pc, #152]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800559c:	e00e      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800559e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a2:	3330      	adds	r3, #48	@ 0x30
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f8dd 	bl	8005764 <RCCEx_PLL3_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80055ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80055c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80055c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80055d6:	4916      	ldr	r1, [pc, #88]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	2100      	movs	r1, #0
 80055f2:	6039      	str	r1, [r7, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d00c      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005604:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800560a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800560e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005612:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005616:	4906      	ldr	r1, [pc, #24]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800561e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005622:	4618      	mov	r0, r3
 8005624:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	44020c00 	.word	0x44020c00

08005634 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800563c:	4b48      	ldr	r3, [pc, #288]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a47      	ldr	r2, [pc, #284]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005646:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005648:	f7fb fdaa 	bl	80011a0 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800564e:	e008      	b.n	8005662 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005650:	f7fb fda6 	bl	80011a0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e07a      	b.n	8005758 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005662:	4b3f      	ldr	r3, [pc, #252]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800566e:	4b3c      	ldr	r3, [pc, #240]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6852      	ldr	r2, [r2, #4]
 8005682:	0212      	lsls	r2, r2, #8
 8005684:	430a      	orrs	r2, r1
 8005686:	4936      	ldr	r1, [pc, #216]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	3b01      	subs	r3, #1
 8005692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	025b      	lsls	r3, r3, #9
 800569e:	b29b      	uxth	r3, r3
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	061b      	lsls	r3, r3, #24
 80056b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056bc:	4928      	ldr	r1, [pc, #160]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80056c2:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	f023 020c 	bic.w	r2, r3, #12
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	4924      	ldr	r1, [pc, #144]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80056d4:	4b22      	ldr	r3, [pc, #136]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	f023 0220 	bic.w	r2, r3, #32
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	491f      	ldr	r1, [pc, #124]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	491c      	ldr	r1, [pc, #112]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005700:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005708:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6a12      	ldr	r2, [r2, #32]
 8005710:	00d2      	lsls	r2, r2, #3
 8005712:	4913      	ldr	r1, [pc, #76]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005714:	4313      	orrs	r3, r2
 8005716:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005718:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 800571e:	f043 0310 	orr.w	r3, r3, #16
 8005722:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005724:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 800572a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800572e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005730:	f7fb fd36 	bl	80011a0 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005736:	e008      	b.n	800574a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005738:	f7fb fd32 	bl	80011a0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e006      	b.n	8005758 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800574a:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <RCCEx_PLL2_Config+0x12c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0

}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	44020c00 	.word	0x44020c00

08005764 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800576c:	4b48      	ldr	r3, [pc, #288]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a47      	ldr	r2, [pc, #284]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005776:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005778:	f7fb fd12 	bl	80011a0 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800577e:	e008      	b.n	8005792 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005780:	f7fb fd0e 	bl	80011a0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e07a      	b.n	8005888 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005792:	4b3f      	ldr	r3, [pc, #252]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800579e:	4b3c      	ldr	r3, [pc, #240]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6852      	ldr	r2, [r2, #4]
 80057b2:	0212      	lsls	r2, r2, #8
 80057b4:	430a      	orrs	r2, r1
 80057b6:	4936      	ldr	r1, [pc, #216]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	630b      	str	r3, [r1, #48]	@ 0x30
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	025b      	lsls	r3, r3, #9
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057ec:	4928      	ldr	r1, [pc, #160]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057f2:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	f023 020c 	bic.w	r2, r3, #12
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	4924      	ldr	r1, [pc, #144]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005800:	4313      	orrs	r3, r2
 8005802:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005804:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	f023 0220 	bic.w	r2, r3, #32
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	491f      	ldr	r1, [pc, #124]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005812:	4313      	orrs	r3, r2
 8005814:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005816:	4b1e      	ldr	r3, [pc, #120]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	491c      	ldr	r1, [pc, #112]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005820:	4313      	orrs	r3, r2
 8005822:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005824:	4b1a      	ldr	r3, [pc, #104]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005830:	4b17      	ldr	r3, [pc, #92]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005834:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005838:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6a12      	ldr	r2, [r2, #32]
 8005840:	00d2      	lsls	r2, r2, #3
 8005842:	4913      	ldr	r1, [pc, #76]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005848:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	4a10      	ldr	r2, [pc, #64]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800584e:	f043 0310 	orr.w	r3, r3, #16
 8005852:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0d      	ldr	r2, [pc, #52]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005860:	f7fb fc9e 	bl	80011a0 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005866:	e008      	b.n	800587a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005868:	f7fb fc9a 	bl	80011a0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <RCCEx_PLL3_Config+0x12c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	44020c00 	.word	0x44020c00

08005894 <std>:
 8005894:	2300      	movs	r3, #0
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
 800589a:	6083      	str	r3, [r0, #8]
 800589c:	8181      	strh	r1, [r0, #12]
 800589e:	4619      	mov	r1, r3
 80058a0:	6643      	str	r3, [r0, #100]	@ 0x64
 80058a2:	81c2      	strh	r2, [r0, #14]
 80058a4:	2208      	movs	r2, #8
 80058a6:	6183      	str	r3, [r0, #24]
 80058a8:	e9c0 3300 	strd	r3, r3, [r0]
 80058ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058b0:	305c      	adds	r0, #92	@ 0x5c
 80058b2:	f000 f929 	bl	8005b08 <memset>
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <std+0x58>)
 80058b8:	6224      	str	r4, [r4, #32]
 80058ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80058bc:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <std+0x5c>)
 80058be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c0:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <std+0x60>)
 80058c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <std+0x64>)
 80058c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <std+0x68>)
 80058ca:	429c      	cmp	r4, r3
 80058cc:	d006      	beq.n	80058dc <std+0x48>
 80058ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058d2:	4294      	cmp	r4, r2
 80058d4:	d002      	beq.n	80058dc <std+0x48>
 80058d6:	33d0      	adds	r3, #208	@ 0xd0
 80058d8:	429c      	cmp	r4, r3
 80058da:	d105      	bne.n	80058e8 <std+0x54>
 80058dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e4:	f000 b942 	b.w	8005b6c <__retarget_lock_init_recursive>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	080063cd 	.word	0x080063cd
 80058f0:	080063ef 	.word	0x080063ef
 80058f4:	08006427 	.word	0x08006427
 80058f8:	0800644b 	.word	0x0800644b
 80058fc:	20000194 	.word	0x20000194

08005900 <stdio_exit_handler>:
 8005900:	4a02      	ldr	r2, [pc, #8]	@ (800590c <stdio_exit_handler+0xc>)
 8005902:	4903      	ldr	r1, [pc, #12]	@ (8005910 <stdio_exit_handler+0x10>)
 8005904:	4803      	ldr	r0, [pc, #12]	@ (8005914 <stdio_exit_handler+0x14>)
 8005906:	f000 b869 	b.w	80059dc <_fwalk_sglue>
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c
 8005910:	08006365 	.word	0x08006365
 8005914:	2000001c 	.word	0x2000001c

08005918 <cleanup_stdio>:
 8005918:	6841      	ldr	r1, [r0, #4]
 800591a:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <cleanup_stdio+0x34>)
 800591c:	4299      	cmp	r1, r3
 800591e:	b510      	push	{r4, lr}
 8005920:	4604      	mov	r4, r0
 8005922:	d001      	beq.n	8005928 <cleanup_stdio+0x10>
 8005924:	f000 fd1e 	bl	8006364 <_fflush_r>
 8005928:	68a1      	ldr	r1, [r4, #8]
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <cleanup_stdio+0x38>)
 800592c:	4299      	cmp	r1, r3
 800592e:	d002      	beq.n	8005936 <cleanup_stdio+0x1e>
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fd17 	bl	8006364 <_fflush_r>
 8005936:	68e1      	ldr	r1, [r4, #12]
 8005938:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <cleanup_stdio+0x3c>)
 800593a:	4299      	cmp	r1, r3
 800593c:	d004      	beq.n	8005948 <cleanup_stdio+0x30>
 800593e:	4620      	mov	r0, r4
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f000 bd0e 	b.w	8006364 <_fflush_r>
 8005948:	bd10      	pop	{r4, pc}
 800594a:	bf00      	nop
 800594c:	20000194 	.word	0x20000194
 8005950:	200001fc 	.word	0x200001fc
 8005954:	20000264 	.word	0x20000264

08005958 <global_stdio_init.part.0>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <global_stdio_init.part.0+0x30>)
 800595c:	2104      	movs	r1, #4
 800595e:	4c0b      	ldr	r4, [pc, #44]	@ (800598c <global_stdio_init.part.0+0x34>)
 8005960:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x38>)
 8005962:	4620      	mov	r0, r4
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	f7ff ff94 	bl	8005894 <std>
 800596c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005970:	2201      	movs	r2, #1
 8005972:	2109      	movs	r1, #9
 8005974:	f7ff ff8e 	bl	8005894 <std>
 8005978:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800597c:	2202      	movs	r2, #2
 800597e:	2112      	movs	r1, #18
 8005980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005984:	f7ff bf86 	b.w	8005894 <std>
 8005988:	200002cc 	.word	0x200002cc
 800598c:	20000194 	.word	0x20000194
 8005990:	08005901 	.word	0x08005901

08005994 <__sfp_lock_acquire>:
 8005994:	4801      	ldr	r0, [pc, #4]	@ (800599c <__sfp_lock_acquire+0x8>)
 8005996:	f000 b8ea 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	200002d1 	.word	0x200002d1

080059a0 <__sfp_lock_release>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__sfp_lock_release+0x8>)
 80059a2:	f000 b8e5 	b.w	8005b70 <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	200002d1 	.word	0x200002d1

080059ac <__sinit>:
 80059ac:	b510      	push	{r4, lr}
 80059ae:	4604      	mov	r4, r0
 80059b0:	f7ff fff0 	bl	8005994 <__sfp_lock_acquire>
 80059b4:	6a23      	ldr	r3, [r4, #32]
 80059b6:	b11b      	cbz	r3, 80059c0 <__sinit+0x14>
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f7ff bff0 	b.w	80059a0 <__sfp_lock_release>
 80059c0:	4b04      	ldr	r3, [pc, #16]	@ (80059d4 <__sinit+0x28>)
 80059c2:	6223      	str	r3, [r4, #32]
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__sinit+0x2c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f5      	bne.n	80059b8 <__sinit+0xc>
 80059cc:	f7ff ffc4 	bl	8005958 <global_stdio_init.part.0>
 80059d0:	e7f2      	b.n	80059b8 <__sinit+0xc>
 80059d2:	bf00      	nop
 80059d4:	08005919 	.word	0x08005919
 80059d8:	200002cc 	.word	0x200002cc

080059dc <_fwalk_sglue>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4607      	mov	r7, r0
 80059e2:	4688      	mov	r8, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	2600      	movs	r6, #0
 80059e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ec:	f1b9 0901 	subs.w	r9, r9, #1
 80059f0:	d505      	bpl.n	80059fe <_fwalk_sglue+0x22>
 80059f2:	6824      	ldr	r4, [r4, #0]
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	d1f7      	bne.n	80059e8 <_fwalk_sglue+0xc>
 80059f8:	4630      	mov	r0, r6
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d907      	bls.n	8005a14 <_fwalk_sglue+0x38>
 8005a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d003      	beq.n	8005a14 <_fwalk_sglue+0x38>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	4306      	orrs	r6, r0
 8005a14:	3568      	adds	r5, #104	@ 0x68
 8005a16:	e7e9      	b.n	80059ec <_fwalk_sglue+0x10>

08005a18 <iprintf>:
 8005a18:	b40f      	push	{r0, r1, r2, r3}
 8005a1a:	b507      	push	{r0, r1, r2, lr}
 8005a1c:	4906      	ldr	r1, [pc, #24]	@ (8005a38 <iprintf+0x20>)
 8005a1e:	ab04      	add	r3, sp, #16
 8005a20:	6808      	ldr	r0, [r1, #0]
 8005a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a26:	6881      	ldr	r1, [r0, #8]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	f000 f8cb 	bl	8005bc4 <_vfiprintf_r>
 8005a2e:	b003      	add	sp, #12
 8005a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a34:	b004      	add	sp, #16
 8005a36:	4770      	bx	lr
 8005a38:	20000018 	.word	0x20000018

08005a3c <putchar>:
 8005a3c:	4b02      	ldr	r3, [pc, #8]	@ (8005a48 <putchar+0xc>)
 8005a3e:	4601      	mov	r1, r0
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	6882      	ldr	r2, [r0, #8]
 8005a44:	f000 bdfb 	b.w	800663e <_putc_r>
 8005a48:	20000018 	.word	0x20000018

08005a4c <_puts_r>:
 8005a4c:	6a03      	ldr	r3, [r0, #32]
 8005a4e:	b570      	push	{r4, r5, r6, lr}
 8005a50:	4605      	mov	r5, r0
 8005a52:	460e      	mov	r6, r1
 8005a54:	6884      	ldr	r4, [r0, #8]
 8005a56:	b90b      	cbnz	r3, 8005a5c <_puts_r+0x10>
 8005a58:	f7ff ffa8 	bl	80059ac <__sinit>
 8005a5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d405      	bmi.n	8005a6e <_puts_r+0x22>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	0598      	lsls	r0, r3, #22
 8005a66:	d402      	bmi.n	8005a6e <_puts_r+0x22>
 8005a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a6a:	f000 f880 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	0719      	lsls	r1, r3, #28
 8005a72:	d502      	bpl.n	8005a7a <_puts_r+0x2e>
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d135      	bne.n	8005ae6 <_puts_r+0x9a>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 fd27 	bl	80064d0 <__swsetup_r>
 8005a82:	b380      	cbz	r0, 8005ae6 <_puts_r+0x9a>
 8005a84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005a88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a8a:	07da      	lsls	r2, r3, #31
 8005a8c:	d405      	bmi.n	8005a9a <_puts_r+0x4e>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	d402      	bmi.n	8005a9a <_puts_r+0x4e>
 8005a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a96:	f000 f86b 	bl	8005b70 <__retarget_lock_release_recursive>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da04      	bge.n	8005aac <_puts_r+0x60>
 8005aa2:	69a2      	ldr	r2, [r4, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	dc17      	bgt.n	8005ad8 <_puts_r+0x8c>
 8005aa8:	290a      	cmp	r1, #10
 8005aaa:	d015      	beq.n	8005ad8 <_puts_r+0x8c>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	6022      	str	r2, [r4, #0]
 8005ab2:	7019      	strb	r1, [r3, #0]
 8005ab4:	68a3      	ldr	r3, [r4, #8]
 8005ab6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d1ed      	bne.n	8005a9e <_puts_r+0x52>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da11      	bge.n	8005aea <_puts_r+0x9e>
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	210a      	movs	r1, #10
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fcc1 	bl	8006452 <__swbuf_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d0d7      	beq.n	8005a84 <_puts_r+0x38>
 8005ad4:	250a      	movs	r5, #10
 8005ad6:	e7d7      	b.n	8005a88 <_puts_r+0x3c>
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fcb9 	bl	8006452 <__swbuf_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1e7      	bne.n	8005ab4 <_puts_r+0x68>
 8005ae4:	e7ce      	b.n	8005a84 <_puts_r+0x38>
 8005ae6:	3e01      	subs	r6, #1
 8005ae8:	e7e4      	b.n	8005ab4 <_puts_r+0x68>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	220a      	movs	r2, #10
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e7ee      	b.n	8005ad4 <_puts_r+0x88>
	...

08005af8 <puts>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	@ (8005b04 <puts+0xc>)
 8005afa:	4601      	mov	r1, r0
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	f7ff bfa5 	b.w	8005a4c <_puts_r>
 8005b02:	bf00      	nop
 8005b04:	20000018 	.word	0x20000018

08005b08 <memset>:
 8005b08:	4402      	add	r2, r0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d100      	bne.n	8005b12 <memset+0xa>
 8005b10:	4770      	bx	lr
 8005b12:	f803 1b01 	strb.w	r1, [r3], #1
 8005b16:	e7f9      	b.n	8005b0c <memset+0x4>

08005b18 <__errno>:
 8005b18:	4b01      	ldr	r3, [pc, #4]	@ (8005b20 <__errno+0x8>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000018 	.word	0x20000018

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	@ (8005b5c <__libc_init_array+0x38>)
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4c0d      	ldr	r4, [pc, #52]	@ (8005b60 <__libc_init_array+0x3c>)
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	@ (8005b64 <__libc_init_array+0x40>)
 8005b36:	2600      	movs	r6, #0
 8005b38:	4c0b      	ldr	r4, [pc, #44]	@ (8005b68 <__libc_init_array+0x44>)
 8005b3a:	f000 fe85 	bl	8006848 <_init>
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	4798      	blx	r3
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	3601      	adds	r6, #1
 8005b58:	4798      	blx	r3
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	0800698c 	.word	0x0800698c
 8005b60:	0800698c 	.word	0x0800698c
 8005b64:	0800698c 	.word	0x0800698c
 8005b68:	08006990 	.word	0x08006990

08005b6c <__retarget_lock_init_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_acquire_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <__retarget_lock_release_recursive>:
 8005b70:	4770      	bx	lr

08005b72 <__sfputc_r>:
 8005b72:	6893      	ldr	r3, [r2, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	6093      	str	r3, [r2, #8]
 8005b7a:	b410      	push	{r4}
 8005b7c:	da08      	bge.n	8005b90 <__sfputc_r+0x1e>
 8005b7e:	6994      	ldr	r4, [r2, #24]
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	db01      	blt.n	8005b88 <__sfputc_r+0x16>
 8005b84:	290a      	cmp	r1, #10
 8005b86:	d103      	bne.n	8005b90 <__sfputc_r+0x1e>
 8005b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8c:	f000 bc61 	b.w	8006452 <__swbuf_r>
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	1c58      	adds	r0, r3, #1
 8005b94:	6010      	str	r0, [r2, #0]
 8005b96:	4608      	mov	r0, r1
 8005b98:	7019      	strb	r1, [r3, #0]
 8005b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <__sfputs_r>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	4614      	mov	r4, r2
 8005ba8:	18d5      	adds	r5, r2, r3
 8005baa:	42ac      	cmp	r4, r5
 8005bac:	d101      	bne.n	8005bb2 <__sfputs_r+0x12>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e007      	b.n	8005bc2 <__sfputs_r+0x22>
 8005bb2:	463a      	mov	r2, r7
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffda 	bl	8005b72 <__sfputc_r>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	d1f3      	bne.n	8005baa <__sfputs_r+0xa>
 8005bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bc4 <_vfiprintf_r>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	460d      	mov	r5, r1
 8005bca:	b09d      	sub	sp, #116	@ 0x74
 8005bcc:	4614      	mov	r4, r2
 8005bce:	4698      	mov	r8, r3
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	b118      	cbz	r0, 8005bdc <_vfiprintf_r+0x18>
 8005bd4:	6a03      	ldr	r3, [r0, #32]
 8005bd6:	b90b      	cbnz	r3, 8005bdc <_vfiprintf_r+0x18>
 8005bd8:	f7ff fee8 	bl	80059ac <__sinit>
 8005bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	d405      	bmi.n	8005bee <_vfiprintf_r+0x2a>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	059a      	lsls	r2, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_vfiprintf_r+0x2a>
 8005be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bea:	f7ff ffc0 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	d501      	bpl.n	8005bf8 <_vfiprintf_r+0x34>
 8005bf4:	692b      	ldr	r3, [r5, #16]
 8005bf6:	b99b      	cbnz	r3, 8005c20 <_vfiprintf_r+0x5c>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 fc68 	bl	80064d0 <__swsetup_r>
 8005c00:	b170      	cbz	r0, 8005c20 <_vfiprintf_r+0x5c>
 8005c02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c04:	07dc      	lsls	r4, r3, #31
 8005c06:	d504      	bpl.n	8005c12 <_vfiprintf_r+0x4e>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c0c:	b01d      	add	sp, #116	@ 0x74
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	0598      	lsls	r0, r3, #22
 8005c16:	d4f7      	bmi.n	8005c08 <_vfiprintf_r+0x44>
 8005c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c1a:	f7ff ffa9 	bl	8005b70 <__retarget_lock_release_recursive>
 8005c1e:	e7f3      	b.n	8005c08 <_vfiprintf_r+0x44>
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c26:	f04f 0901 	mov.w	r9, #1
 8005c2a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8005de0 <_vfiprintf_r+0x21c>
 8005c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c30:	2320      	movs	r3, #32
 8005c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c36:	2330      	movs	r3, #48	@ 0x30
 8005c38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	469a      	mov	sl, r3
 8005c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c44:	b10a      	cbz	r2, 8005c4a <_vfiprintf_r+0x86>
 8005c46:	2a25      	cmp	r2, #37	@ 0x25
 8005c48:	d1f9      	bne.n	8005c3e <_vfiprintf_r+0x7a>
 8005c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c4e:	d00b      	beq.n	8005c68 <_vfiprintf_r+0xa4>
 8005c50:	465b      	mov	r3, fp
 8005c52:	4622      	mov	r2, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ffa2 	bl	8005ba0 <__sfputs_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f000 80a7 	beq.w	8005db0 <_vfiprintf_r+0x1ec>
 8005c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c64:	445a      	add	r2, fp
 8005c66:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c68:	f89a 3000 	ldrb.w	r3, [sl]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 809f 	beq.w	8005db0 <_vfiprintf_r+0x1ec>
 8005c72:	2300      	movs	r3, #0
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c78:	f10a 0a01 	add.w	sl, sl, #1
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	9307      	str	r3, [sp, #28]
 8005c80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c84:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8a:	4654      	mov	r4, sl
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	4854      	ldr	r0, [pc, #336]	@ (8005de0 <_vfiprintf_r+0x21c>)
 8005c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c94:	f000 fd80 	bl	8006798 <memchr>
 8005c98:	9a04      	ldr	r2, [sp, #16]
 8005c9a:	b9d8      	cbnz	r0, 8005cd4 <_vfiprintf_r+0x110>
 8005c9c:	06d1      	lsls	r1, r2, #27
 8005c9e:	bf44      	itt	mi
 8005ca0:	2320      	movmi	r3, #32
 8005ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ca6:	0713      	lsls	r3, r2, #28
 8005ca8:	bf44      	itt	mi
 8005caa:	232b      	movmi	r3, #43	@ 0x2b
 8005cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cb6:	d015      	beq.n	8005ce4 <_vfiprintf_r+0x120>
 8005cb8:	9a07      	ldr	r2, [sp, #28]
 8005cba:	4654      	mov	r4, sl
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f04f 0c0a 	mov.w	ip, #10
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cc8:	3b30      	subs	r3, #48	@ 0x30
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d94b      	bls.n	8005d66 <_vfiprintf_r+0x1a2>
 8005cce:	b1b0      	cbz	r0, 8005cfe <_vfiprintf_r+0x13a>
 8005cd0:	9207      	str	r2, [sp, #28]
 8005cd2:	e014      	b.n	8005cfe <_vfiprintf_r+0x13a>
 8005cd4:	eba0 0308 	sub.w	r3, r0, r8
 8005cd8:	46a2      	mov	sl, r4
 8005cda:	fa09 f303 	lsl.w	r3, r9, r3
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	e7d2      	b.n	8005c8a <_vfiprintf_r+0xc6>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	1d19      	adds	r1, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	9103      	str	r1, [sp, #12]
 8005cee:	bfbb      	ittet	lt
 8005cf0:	425b      	neglt	r3, r3
 8005cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8005cf6:	9307      	strge	r3, [sp, #28]
 8005cf8:	9307      	strlt	r3, [sp, #28]
 8005cfa:	bfb8      	it	lt
 8005cfc:	9204      	strlt	r2, [sp, #16]
 8005cfe:	7823      	ldrb	r3, [r4, #0]
 8005d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d02:	d10a      	bne.n	8005d1a <_vfiprintf_r+0x156>
 8005d04:	7863      	ldrb	r3, [r4, #1]
 8005d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d08:	d132      	bne.n	8005d70 <_vfiprintf_r+0x1ac>
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	3402      	adds	r4, #2
 8005d0e:	1d1a      	adds	r2, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d16:	9203      	str	r2, [sp, #12]
 8005d18:	9305      	str	r3, [sp, #20]
 8005d1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005df0 <_vfiprintf_r+0x22c>
 8005d1e:	2203      	movs	r2, #3
 8005d20:	7821      	ldrb	r1, [r4, #0]
 8005d22:	4650      	mov	r0, sl
 8005d24:	f000 fd38 	bl	8006798 <memchr>
 8005d28:	b138      	cbz	r0, 8005d3a <_vfiprintf_r+0x176>
 8005d2a:	eba0 000a 	sub.w	r0, r0, sl
 8005d2e:	2240      	movs	r2, #64	@ 0x40
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	3401      	adds	r4, #1
 8005d34:	4082      	lsls	r2, r0
 8005d36:	4313      	orrs	r3, r2
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3e:	2206      	movs	r2, #6
 8005d40:	4828      	ldr	r0, [pc, #160]	@ (8005de4 <_vfiprintf_r+0x220>)
 8005d42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d46:	f000 fd27 	bl	8006798 <memchr>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d03f      	beq.n	8005dce <_vfiprintf_r+0x20a>
 8005d4e:	4b26      	ldr	r3, [pc, #152]	@ (8005de8 <_vfiprintf_r+0x224>)
 8005d50:	bb1b      	cbnz	r3, 8005d9a <_vfiprintf_r+0x1d6>
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	3307      	adds	r3, #7
 8005d56:	f023 0307 	bic.w	r3, r3, #7
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	9303      	str	r3, [sp, #12]
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	443b      	add	r3, r7
 8005d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d64:	e76a      	b.n	8005c3c <_vfiprintf_r+0x78>
 8005d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	e7a8      	b.n	8005cc2 <_vfiprintf_r+0xfe>
 8005d70:	2300      	movs	r3, #0
 8005d72:	3401      	adds	r4, #1
 8005d74:	f04f 0c0a 	mov.w	ip, #10
 8005d78:	4619      	mov	r1, r3
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d82:	3a30      	subs	r2, #48	@ 0x30
 8005d84:	2a09      	cmp	r2, #9
 8005d86:	d903      	bls.n	8005d90 <_vfiprintf_r+0x1cc>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0c6      	beq.n	8005d1a <_vfiprintf_r+0x156>
 8005d8c:	9105      	str	r1, [sp, #20]
 8005d8e:	e7c4      	b.n	8005d1a <_vfiprintf_r+0x156>
 8005d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d94:	4604      	mov	r4, r0
 8005d96:	2301      	movs	r3, #1
 8005d98:	e7f0      	b.n	8005d7c <_vfiprintf_r+0x1b8>
 8005d9a:	ab03      	add	r3, sp, #12
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	a904      	add	r1, sp, #16
 8005da0:	4630      	mov	r0, r6
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	4b11      	ldr	r3, [pc, #68]	@ (8005dec <_vfiprintf_r+0x228>)
 8005da6:	f3af 8000 	nop.w
 8005daa:	4607      	mov	r7, r0
 8005dac:	1c78      	adds	r0, r7, #1
 8005dae:	d1d6      	bne.n	8005d5e <_vfiprintf_r+0x19a>
 8005db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005db2:	07d9      	lsls	r1, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_vfiprintf_r+0x1fe>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	059a      	lsls	r2, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_vfiprintf_r+0x1fe>
 8005dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dbe:	f7ff fed7 	bl	8005b70 <__retarget_lock_release_recursive>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	065b      	lsls	r3, r3, #25
 8005dc6:	f53f af1f 	bmi.w	8005c08 <_vfiprintf_r+0x44>
 8005dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dcc:	e71e      	b.n	8005c0c <_vfiprintf_r+0x48>
 8005dce:	ab03      	add	r3, sp, #12
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	a904      	add	r1, sp, #16
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <_vfiprintf_r+0x228>)
 8005dda:	f000 f91f 	bl	800601c <_printf_i>
 8005dde:	e7e4      	b.n	8005daa <_vfiprintf_r+0x1e6>
 8005de0:	08006958 	.word	0x08006958
 8005de4:	08006962 	.word	0x08006962
 8005de8:	00000000 	.word	0x00000000
 8005dec:	08005ba1 	.word	0x08005ba1
 8005df0:	0800695e 	.word	0x0800695e

08005df4 <sbrk_aligned>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4e0f      	ldr	r6, [pc, #60]	@ (8005e34 <sbrk_aligned+0x40>)
 8005df8:	460c      	mov	r4, r1
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	6831      	ldr	r1, [r6, #0]
 8005dfe:	b911      	cbnz	r1, 8005e06 <sbrk_aligned+0x12>
 8005e00:	f000 fca8 	bl	8006754 <_sbrk_r>
 8005e04:	6030      	str	r0, [r6, #0]
 8005e06:	4621      	mov	r1, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fca3 	bl	8006754 <_sbrk_r>
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	d103      	bne.n	8005e1a <sbrk_aligned+0x26>
 8005e12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e16:	4620      	mov	r0, r4
 8005e18:	bd70      	pop	{r4, r5, r6, pc}
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d0f8      	beq.n	8005e16 <sbrk_aligned+0x22>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 fc94 	bl	8006754 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1f2      	bne.n	8005e16 <sbrk_aligned+0x22>
 8005e30:	e7ef      	b.n	8005e12 <sbrk_aligned+0x1e>
 8005e32:	bf00      	nop
 8005e34:	200002d4 	.word	0x200002d4

08005e38 <_malloc_r>:
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3c:	1ccd      	adds	r5, r1, #3
 8005e3e:	4606      	mov	r6, r0
 8005e40:	f025 0503 	bic.w	r5, r5, #3
 8005e44:	3508      	adds	r5, #8
 8005e46:	2d0c      	cmp	r5, #12
 8005e48:	bf38      	it	cc
 8005e4a:	250c      	movcc	r5, #12
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	db01      	blt.n	8005e54 <_malloc_r+0x1c>
 8005e50:	42a9      	cmp	r1, r5
 8005e52:	d904      	bls.n	8005e5e <_malloc_r+0x26>
 8005e54:	230c      	movs	r3, #12
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f34 <_malloc_r+0xfc>
 8005e62:	f000 faa7 	bl	80063b4 <__malloc_lock>
 8005e66:	f8d8 3000 	ldr.w	r3, [r8]
 8005e6a:	461c      	mov	r4, r3
 8005e6c:	bb44      	cbnz	r4, 8005ec0 <_malloc_r+0x88>
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7ff ffbf 	bl	8005df4 <sbrk_aligned>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	4604      	mov	r4, r0
 8005e7a:	d158      	bne.n	8005f2e <_malloc_r+0xf6>
 8005e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e80:	4627      	mov	r7, r4
 8005e82:	2f00      	cmp	r7, #0
 8005e84:	d143      	bne.n	8005f0e <_malloc_r+0xd6>
 8005e86:	2c00      	cmp	r4, #0
 8005e88:	d04b      	beq.n	8005f22 <_malloc_r+0xea>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4630      	mov	r0, r6
 8005e90:	eb04 0903 	add.w	r9, r4, r3
 8005e94:	f000 fc5e 	bl	8006754 <_sbrk_r>
 8005e98:	4581      	cmp	r9, r0
 8005e9a:	d142      	bne.n	8005f22 <_malloc_r+0xea>
 8005e9c:	6821      	ldr	r1, [r4, #0]
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	1a6d      	subs	r5, r5, r1
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7ff ffa6 	bl	8005df4 <sbrk_aligned>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d03a      	beq.n	8005f22 <_malloc_r+0xea>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	442b      	add	r3, r5
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	bb62      	cbnz	r2, 8005f14 <_malloc_r+0xdc>
 8005eba:	f8c8 7000 	str.w	r7, [r8]
 8005ebe:	e00f      	b.n	8005ee0 <_malloc_r+0xa8>
 8005ec0:	6822      	ldr	r2, [r4, #0]
 8005ec2:	1b52      	subs	r2, r2, r5
 8005ec4:	d420      	bmi.n	8005f08 <_malloc_r+0xd0>
 8005ec6:	2a0b      	cmp	r2, #11
 8005ec8:	d917      	bls.n	8005efa <_malloc_r+0xc2>
 8005eca:	1961      	adds	r1, r4, r5
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	6025      	str	r5, [r4, #0]
 8005ed0:	bf18      	it	ne
 8005ed2:	6059      	strne	r1, [r3, #4]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	bf08      	it	eq
 8005ed8:	f8c8 1000 	streq.w	r1, [r8]
 8005edc:	5162      	str	r2, [r4, r5]
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 fa6d 	bl	80063c0 <__malloc_unlock>
 8005ee6:	f104 000b 	add.w	r0, r4, #11
 8005eea:	1d23      	adds	r3, r4, #4
 8005eec:	f020 0007 	bic.w	r0, r0, #7
 8005ef0:	1ac2      	subs	r2, r0, r3
 8005ef2:	bf1c      	itt	ne
 8005ef4:	1a1b      	subne	r3, r3, r0
 8005ef6:	50a3      	strne	r3, [r4, r2]
 8005ef8:	e7af      	b.n	8005e5a <_malloc_r+0x22>
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	bf0c      	ite	eq
 8005f00:	f8c8 2000 	streq.w	r2, [r8]
 8005f04:	605a      	strne	r2, [r3, #4]
 8005f06:	e7eb      	b.n	8005ee0 <_malloc_r+0xa8>
 8005f08:	4623      	mov	r3, r4
 8005f0a:	6864      	ldr	r4, [r4, #4]
 8005f0c:	e7ae      	b.n	8005e6c <_malloc_r+0x34>
 8005f0e:	463c      	mov	r4, r7
 8005f10:	687f      	ldr	r7, [r7, #4]
 8005f12:	e7b6      	b.n	8005e82 <_malloc_r+0x4a>
 8005f14:	461a      	mov	r2, r3
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	d1fb      	bne.n	8005f14 <_malloc_r+0xdc>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6053      	str	r3, [r2, #4]
 8005f20:	e7de      	b.n	8005ee0 <_malloc_r+0xa8>
 8005f22:	230c      	movs	r3, #12
 8005f24:	4630      	mov	r0, r6
 8005f26:	6033      	str	r3, [r6, #0]
 8005f28:	f000 fa4a 	bl	80063c0 <__malloc_unlock>
 8005f2c:	e794      	b.n	8005e58 <_malloc_r+0x20>
 8005f2e:	6005      	str	r5, [r0, #0]
 8005f30:	e7d6      	b.n	8005ee0 <_malloc_r+0xa8>
 8005f32:	bf00      	nop
 8005f34:	200002d8 	.word	0x200002d8

08005f38 <_printf_common>:
 8005f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	4698      	mov	r8, r3
 8005f40:	688a      	ldr	r2, [r1, #8]
 8005f42:	4607      	mov	r7, r0
 8005f44:	690b      	ldr	r3, [r1, #16]
 8005f46:	460c      	mov	r4, r1
 8005f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bfb8      	it	lt
 8005f50:	4613      	movlt	r3, r2
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f58:	b10a      	cbz	r2, 8005f5e <_printf_common+0x26>
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	0699      	lsls	r1, r3, #26
 8005f62:	bf42      	ittt	mi
 8005f64:	6833      	ldrmi	r3, [r6, #0]
 8005f66:	3302      	addmi	r3, #2
 8005f68:	6033      	strmi	r3, [r6, #0]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	f015 0506 	ands.w	r5, r5, #6
 8005f70:	d106      	bne.n	8005f80 <_printf_common+0x48>
 8005f72:	f104 0a19 	add.w	sl, r4, #25
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	6832      	ldr	r2, [r6, #0]
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dc2b      	bgt.n	8005fd8 <_printf_common+0xa0>
 8005f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	3b00      	subs	r3, #0
 8005f88:	bf18      	it	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	0692      	lsls	r2, r2, #26
 8005f8e:	d430      	bmi.n	8005ff2 <_printf_common+0xba>
 8005f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f94:	4641      	mov	r1, r8
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c8      	blx	r9
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d023      	beq.n	8005fe6 <_printf_common+0xae>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	341a      	adds	r4, #26
 8005fa2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	bf0a      	itet	eq
 8005fae:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005fb2:	2500      	movne	r5, #0
 8005fb4:	6833      	ldreq	r3, [r6, #0]
 8005fb6:	f04f 0600 	mov.w	r6, #0
 8005fba:	bf08      	it	eq
 8005fbc:	1aed      	subeq	r5, r5, r3
 8005fbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005fc2:	bf08      	it	eq
 8005fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfc4      	itt	gt
 8005fcc:	1a9b      	subgt	r3, r3, r2
 8005fce:	18ed      	addgt	r5, r5, r3
 8005fd0:	42b5      	cmp	r5, r6
 8005fd2:	d11a      	bne.n	800600a <_printf_common+0xd2>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e008      	b.n	8005fea <_printf_common+0xb2>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4652      	mov	r2, sl
 8005fdc:	4641      	mov	r1, r8
 8005fde:	4638      	mov	r0, r7
 8005fe0:	47c8      	blx	r9
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d103      	bne.n	8005fee <_printf_common+0xb6>
 8005fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fee:	3501      	adds	r5, #1
 8005ff0:	e7c1      	b.n	8005f76 <_printf_common+0x3e>
 8005ff2:	18e1      	adds	r1, r4, r3
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	2030      	movs	r0, #48	@ 0x30
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	4422      	add	r2, r4
 8005ffc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006008:	e7c2      	b.n	8005f90 <_printf_common+0x58>
 800600a:	2301      	movs	r3, #1
 800600c:	4622      	mov	r2, r4
 800600e:	4641      	mov	r1, r8
 8006010:	4638      	mov	r0, r7
 8006012:	47c8      	blx	r9
 8006014:	3001      	adds	r0, #1
 8006016:	d0e6      	beq.n	8005fe6 <_printf_common+0xae>
 8006018:	3601      	adds	r6, #1
 800601a:	e7d9      	b.n	8005fd0 <_printf_common+0x98>

0800601c <_printf_i>:
 800601c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	7e0f      	ldrb	r7, [r1, #24]
 8006022:	4691      	mov	r9, r2
 8006024:	4680      	mov	r8, r0
 8006026:	460c      	mov	r4, r1
 8006028:	2f78      	cmp	r7, #120	@ 0x78
 800602a:	469a      	mov	sl, r3
 800602c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800602e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006032:	d807      	bhi.n	8006044 <_printf_i+0x28>
 8006034:	2f62      	cmp	r7, #98	@ 0x62
 8006036:	d80a      	bhi.n	800604e <_printf_i+0x32>
 8006038:	2f00      	cmp	r7, #0
 800603a:	f000 80d2 	beq.w	80061e2 <_printf_i+0x1c6>
 800603e:	2f58      	cmp	r7, #88	@ 0x58
 8006040:	f000 80b9 	beq.w	80061b6 <_printf_i+0x19a>
 8006044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800604c:	e03a      	b.n	80060c4 <_printf_i+0xa8>
 800604e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006052:	2b15      	cmp	r3, #21
 8006054:	d8f6      	bhi.n	8006044 <_printf_i+0x28>
 8006056:	a101      	add	r1, pc, #4	@ (adr r1, 800605c <_printf_i+0x40>)
 8006058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060c9 	.word	0x080060c9
 8006064:	08006045 	.word	0x08006045
 8006068:	08006045 	.word	0x08006045
 800606c:	08006045 	.word	0x08006045
 8006070:	08006045 	.word	0x08006045
 8006074:	080060c9 	.word	0x080060c9
 8006078:	08006045 	.word	0x08006045
 800607c:	08006045 	.word	0x08006045
 8006080:	08006045 	.word	0x08006045
 8006084:	08006045 	.word	0x08006045
 8006088:	080061c9 	.word	0x080061c9
 800608c:	080060f3 	.word	0x080060f3
 8006090:	08006183 	.word	0x08006183
 8006094:	08006045 	.word	0x08006045
 8006098:	08006045 	.word	0x08006045
 800609c:	080061eb 	.word	0x080061eb
 80060a0:	08006045 	.word	0x08006045
 80060a4:	080060f3 	.word	0x080060f3
 80060a8:	08006045 	.word	0x08006045
 80060ac:	08006045 	.word	0x08006045
 80060b0:	0800618b 	.word	0x0800618b
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	1d1a      	adds	r2, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6032      	str	r2, [r6, #0]
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060c4:	2301      	movs	r3, #1
 80060c6:	e09d      	b.n	8006204 <_printf_i+0x1e8>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	1d19      	adds	r1, r3, #4
 80060ce:	6031      	str	r1, [r6, #0]
 80060d0:	0606      	lsls	r6, r0, #24
 80060d2:	d501      	bpl.n	80060d8 <_printf_i+0xbc>
 80060d4:	681d      	ldr	r5, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <_printf_i+0xc4>
 80060d8:	0645      	lsls	r5, r0, #25
 80060da:	d5fb      	bpl.n	80060d4 <_printf_i+0xb8>
 80060dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	da03      	bge.n	80060ec <_printf_i+0xd0>
 80060e4:	232d      	movs	r3, #45	@ 0x2d
 80060e6:	426d      	negs	r5, r5
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ec:	4859      	ldr	r0, [pc, #356]	@ (8006254 <_printf_i+0x238>)
 80060ee:	230a      	movs	r3, #10
 80060f0:	e011      	b.n	8006116 <_printf_i+0xfa>
 80060f2:	6821      	ldr	r1, [r4, #0]
 80060f4:	6833      	ldr	r3, [r6, #0]
 80060f6:	0608      	lsls	r0, r1, #24
 80060f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060fc:	d402      	bmi.n	8006104 <_printf_i+0xe8>
 80060fe:	0649      	lsls	r1, r1, #25
 8006100:	bf48      	it	mi
 8006102:	b2ad      	uxthmi	r5, r5
 8006104:	2f6f      	cmp	r7, #111	@ 0x6f
 8006106:	6033      	str	r3, [r6, #0]
 8006108:	4852      	ldr	r0, [pc, #328]	@ (8006254 <_printf_i+0x238>)
 800610a:	bf14      	ite	ne
 800610c:	230a      	movne	r3, #10
 800610e:	2308      	moveq	r3, #8
 8006110:	2100      	movs	r1, #0
 8006112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006116:	6866      	ldr	r6, [r4, #4]
 8006118:	2e00      	cmp	r6, #0
 800611a:	60a6      	str	r6, [r4, #8]
 800611c:	bfa2      	ittt	ge
 800611e:	6821      	ldrge	r1, [r4, #0]
 8006120:	f021 0104 	bicge.w	r1, r1, #4
 8006124:	6021      	strge	r1, [r4, #0]
 8006126:	b90d      	cbnz	r5, 800612c <_printf_i+0x110>
 8006128:	2e00      	cmp	r6, #0
 800612a:	d04b      	beq.n	80061c4 <_printf_i+0x1a8>
 800612c:	4616      	mov	r6, r2
 800612e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006132:	fb03 5711 	mls	r7, r3, r1, r5
 8006136:	5dc7      	ldrb	r7, [r0, r7]
 8006138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800613c:	462f      	mov	r7, r5
 800613e:	460d      	mov	r5, r1
 8006140:	42bb      	cmp	r3, r7
 8006142:	d9f4      	bls.n	800612e <_printf_i+0x112>
 8006144:	2b08      	cmp	r3, #8
 8006146:	d10b      	bne.n	8006160 <_printf_i+0x144>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07df      	lsls	r7, r3, #31
 800614c:	d508      	bpl.n	8006160 <_printf_i+0x144>
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	6861      	ldr	r1, [r4, #4]
 8006152:	4299      	cmp	r1, r3
 8006154:	bfde      	ittt	le
 8006156:	2330      	movle	r3, #48	@ 0x30
 8006158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800615c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006160:	1b92      	subs	r2, r2, r6
 8006162:	6122      	str	r2, [r4, #16]
 8006164:	464b      	mov	r3, r9
 8006166:	aa03      	add	r2, sp, #12
 8006168:	4621      	mov	r1, r4
 800616a:	4640      	mov	r0, r8
 800616c:	f8cd a000 	str.w	sl, [sp]
 8006170:	f7ff fee2 	bl	8005f38 <_printf_common>
 8006174:	3001      	adds	r0, #1
 8006176:	d14a      	bne.n	800620e <_printf_i+0x1f2>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800617c:	b004      	add	sp, #16
 800617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	f043 0320 	orr.w	r3, r3, #32
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	2778      	movs	r7, #120	@ 0x78
 800618c:	4832      	ldr	r0, [pc, #200]	@ (8006258 <_printf_i+0x23c>)
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006194:	061f      	lsls	r7, r3, #24
 8006196:	6831      	ldr	r1, [r6, #0]
 8006198:	f851 5b04 	ldr.w	r5, [r1], #4
 800619c:	d402      	bmi.n	80061a4 <_printf_i+0x188>
 800619e:	065f      	lsls	r7, r3, #25
 80061a0:	bf48      	it	mi
 80061a2:	b2ad      	uxthmi	r5, r5
 80061a4:	6031      	str	r1, [r6, #0]
 80061a6:	07d9      	lsls	r1, r3, #31
 80061a8:	bf44      	itt	mi
 80061aa:	f043 0320 	orrmi.w	r3, r3, #32
 80061ae:	6023      	strmi	r3, [r4, #0]
 80061b0:	b11d      	cbz	r5, 80061ba <_printf_i+0x19e>
 80061b2:	2310      	movs	r3, #16
 80061b4:	e7ac      	b.n	8006110 <_printf_i+0xf4>
 80061b6:	4827      	ldr	r0, [pc, #156]	@ (8006254 <_printf_i+0x238>)
 80061b8:	e7e9      	b.n	800618e <_printf_i+0x172>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	f023 0320 	bic.w	r3, r3, #32
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	e7f6      	b.n	80061b2 <_printf_i+0x196>
 80061c4:	4616      	mov	r6, r2
 80061c6:	e7bd      	b.n	8006144 <_printf_i+0x128>
 80061c8:	6833      	ldr	r3, [r6, #0]
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	1d18      	adds	r0, r3, #4
 80061ce:	6961      	ldr	r1, [r4, #20]
 80061d0:	6030      	str	r0, [r6, #0]
 80061d2:	062e      	lsls	r6, r5, #24
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	d501      	bpl.n	80061dc <_printf_i+0x1c0>
 80061d8:	6019      	str	r1, [r3, #0]
 80061da:	e002      	b.n	80061e2 <_printf_i+0x1c6>
 80061dc:	0668      	lsls	r0, r5, #25
 80061de:	d5fb      	bpl.n	80061d8 <_printf_i+0x1bc>
 80061e0:	8019      	strh	r1, [r3, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	4616      	mov	r6, r2
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	e7bc      	b.n	8006164 <_printf_i+0x148>
 80061ea:	6833      	ldr	r3, [r6, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	6032      	str	r2, [r6, #0]
 80061f2:	681e      	ldr	r6, [r3, #0]
 80061f4:	6862      	ldr	r2, [r4, #4]
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 face 	bl	8006798 <memchr>
 80061fc:	b108      	cbz	r0, 8006202 <_printf_i+0x1e6>
 80061fe:	1b80      	subs	r0, r0, r6
 8006200:	6060      	str	r0, [r4, #4]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	2300      	movs	r3, #0
 8006208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620c:	e7aa      	b.n	8006164 <_printf_i+0x148>
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	4632      	mov	r2, r6
 8006212:	4649      	mov	r1, r9
 8006214:	4640      	mov	r0, r8
 8006216:	47d0      	blx	sl
 8006218:	3001      	adds	r0, #1
 800621a:	d0ad      	beq.n	8006178 <_printf_i+0x15c>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	079b      	lsls	r3, r3, #30
 8006220:	d413      	bmi.n	800624a <_printf_i+0x22e>
 8006222:	68e0      	ldr	r0, [r4, #12]
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	4298      	cmp	r0, r3
 8006228:	bfb8      	it	lt
 800622a:	4618      	movlt	r0, r3
 800622c:	e7a6      	b.n	800617c <_printf_i+0x160>
 800622e:	2301      	movs	r3, #1
 8006230:	4632      	mov	r2, r6
 8006232:	4649      	mov	r1, r9
 8006234:	4640      	mov	r0, r8
 8006236:	47d0      	blx	sl
 8006238:	3001      	adds	r0, #1
 800623a:	d09d      	beq.n	8006178 <_printf_i+0x15c>
 800623c:	3501      	adds	r5, #1
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	9903      	ldr	r1, [sp, #12]
 8006242:	1a5b      	subs	r3, r3, r1
 8006244:	42ab      	cmp	r3, r5
 8006246:	dcf2      	bgt.n	800622e <_printf_i+0x212>
 8006248:	e7eb      	b.n	8006222 <_printf_i+0x206>
 800624a:	2500      	movs	r5, #0
 800624c:	f104 0619 	add.w	r6, r4, #25
 8006250:	e7f5      	b.n	800623e <_printf_i+0x222>
 8006252:	bf00      	nop
 8006254:	08006969 	.word	0x08006969
 8006258:	0800697a 	.word	0x0800697a

0800625c <__sflush_r>:
 800625c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	0716      	lsls	r6, r2, #28
 8006266:	4605      	mov	r5, r0
 8006268:	460c      	mov	r4, r1
 800626a:	d454      	bmi.n	8006316 <__sflush_r+0xba>
 800626c:	684b      	ldr	r3, [r1, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	dc02      	bgt.n	8006278 <__sflush_r+0x1c>
 8006272:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd48      	ble.n	800630a <__sflush_r+0xae>
 8006278:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800627a:	2e00      	cmp	r6, #0
 800627c:	d045      	beq.n	800630a <__sflush_r+0xae>
 800627e:	2300      	movs	r3, #0
 8006280:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006284:	682f      	ldr	r7, [r5, #0]
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	d030      	beq.n	80062ee <__sflush_r+0x92>
 800628c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	0759      	lsls	r1, r3, #29
 8006292:	d505      	bpl.n	80062a0 <__sflush_r+0x44>
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800629a:	b10b      	cbz	r3, 80062a0 <__sflush_r+0x44>
 800629c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	2300      	movs	r3, #0
 80062a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062a4:	6a21      	ldr	r1, [r4, #32]
 80062a6:	4628      	mov	r0, r5
 80062a8:	47b0      	blx	r6
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	d106      	bne.n	80062be <__sflush_r+0x62>
 80062b0:	6829      	ldr	r1, [r5, #0]
 80062b2:	291d      	cmp	r1, #29
 80062b4:	d82b      	bhi.n	800630e <__sflush_r+0xb2>
 80062b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006360 <__sflush_r+0x104>)
 80062b8:	410a      	asrs	r2, r1
 80062ba:	07d6      	lsls	r6, r2, #31
 80062bc:	d427      	bmi.n	800630e <__sflush_r+0xb2>
 80062be:	2200      	movs	r2, #0
 80062c0:	04d9      	lsls	r1, r3, #19
 80062c2:	6062      	str	r2, [r4, #4]
 80062c4:	6922      	ldr	r2, [r4, #16]
 80062c6:	6022      	str	r2, [r4, #0]
 80062c8:	d504      	bpl.n	80062d4 <__sflush_r+0x78>
 80062ca:	1c42      	adds	r2, r0, #1
 80062cc:	d101      	bne.n	80062d2 <__sflush_r+0x76>
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	b903      	cbnz	r3, 80062d4 <__sflush_r+0x78>
 80062d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062d6:	602f      	str	r7, [r5, #0]
 80062d8:	b1b9      	cbz	r1, 800630a <__sflush_r+0xae>
 80062da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062de:	4299      	cmp	r1, r3
 80062e0:	d002      	beq.n	80062e8 <__sflush_r+0x8c>
 80062e2:	4628      	mov	r0, r5
 80062e4:	f000 fa66 	bl	80067b4 <_free_r>
 80062e8:	2300      	movs	r3, #0
 80062ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ec:	e00d      	b.n	800630a <__sflush_r+0xae>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b0      	blx	r6
 80062f4:	4602      	mov	r2, r0
 80062f6:	1c50      	adds	r0, r2, #1
 80062f8:	d1c9      	bne.n	800628e <__sflush_r+0x32>
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0c6      	beq.n	800628e <__sflush_r+0x32>
 8006300:	2b1d      	cmp	r3, #29
 8006302:	d001      	beq.n	8006308 <__sflush_r+0xac>
 8006304:	2b16      	cmp	r3, #22
 8006306:	d11d      	bne.n	8006344 <__sflush_r+0xe8>
 8006308:	602f      	str	r7, [r5, #0]
 800630a:	2000      	movs	r0, #0
 800630c:	e021      	b.n	8006352 <__sflush_r+0xf6>
 800630e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006312:	b21b      	sxth	r3, r3
 8006314:	e01a      	b.n	800634c <__sflush_r+0xf0>
 8006316:	690f      	ldr	r7, [r1, #16]
 8006318:	2f00      	cmp	r7, #0
 800631a:	d0f6      	beq.n	800630a <__sflush_r+0xae>
 800631c:	0793      	lsls	r3, r2, #30
 800631e:	680e      	ldr	r6, [r1, #0]
 8006320:	600f      	str	r7, [r1, #0]
 8006322:	bf0c      	ite	eq
 8006324:	694b      	ldreq	r3, [r1, #20]
 8006326:	2300      	movne	r3, #0
 8006328:	eba6 0807 	sub.w	r8, r6, r7
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	ddea      	ble.n	800630a <__sflush_r+0xae>
 8006334:	4643      	mov	r3, r8
 8006336:	463a      	mov	r2, r7
 8006338:	6a21      	ldr	r1, [r4, #32]
 800633a:	4628      	mov	r0, r5
 800633c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800633e:	47b0      	blx	r6
 8006340:	2800      	cmp	r0, #0
 8006342:	dc08      	bgt.n	8006356 <__sflush_r+0xfa>
 8006344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800634c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006356:	4407      	add	r7, r0
 8006358:	eba8 0800 	sub.w	r8, r8, r0
 800635c:	e7e7      	b.n	800632e <__sflush_r+0xd2>
 800635e:	bf00      	nop
 8006360:	dfbffffe 	.word	0xdfbffffe

08006364 <_fflush_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	4605      	mov	r5, r0
 800636a:	460c      	mov	r4, r1
 800636c:	b913      	cbnz	r3, 8006374 <_fflush_r+0x10>
 800636e:	2500      	movs	r5, #0
 8006370:	4628      	mov	r0, r5
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	b118      	cbz	r0, 800637e <_fflush_r+0x1a>
 8006376:	6a03      	ldr	r3, [r0, #32]
 8006378:	b90b      	cbnz	r3, 800637e <_fflush_r+0x1a>
 800637a:	f7ff fb17 	bl	80059ac <__sinit>
 800637e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f3      	beq.n	800636e <_fflush_r+0xa>
 8006386:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006388:	07d0      	lsls	r0, r2, #31
 800638a:	d404      	bmi.n	8006396 <_fflush_r+0x32>
 800638c:	0599      	lsls	r1, r3, #22
 800638e:	d402      	bmi.n	8006396 <_fflush_r+0x32>
 8006390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006392:	f7ff fbec 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8006396:	4628      	mov	r0, r5
 8006398:	4621      	mov	r1, r4
 800639a:	f7ff ff5f 	bl	800625c <__sflush_r>
 800639e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063a0:	4605      	mov	r5, r0
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d4e4      	bmi.n	8006370 <_fflush_r+0xc>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	059b      	lsls	r3, r3, #22
 80063aa:	d4e1      	bmi.n	8006370 <_fflush_r+0xc>
 80063ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ae:	f7ff fbdf 	bl	8005b70 <__retarget_lock_release_recursive>
 80063b2:	e7dd      	b.n	8006370 <_fflush_r+0xc>

080063b4 <__malloc_lock>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__malloc_lock+0x8>)
 80063b6:	f7ff bbda 	b.w	8005b6e <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	200002d0 	.word	0x200002d0

080063c0 <__malloc_unlock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_unlock+0x8>)
 80063c2:	f7ff bbd5 	b.w	8005b70 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	200002d0 	.word	0x200002d0

080063cc <__sread>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	460c      	mov	r4, r1
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	f000 f9ac 	bl	8006730 <_read_r>
 80063d8:	2800      	cmp	r0, #0
 80063da:	bfab      	itete	ge
 80063dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063de:	89a3      	ldrhlt	r3, [r4, #12]
 80063e0:	181b      	addge	r3, r3, r0
 80063e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063e6:	bfac      	ite	ge
 80063e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063ea:	81a3      	strhlt	r3, [r4, #12]
 80063ec:	bd10      	pop	{r4, pc}

080063ee <__swrite>:
 80063ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	461f      	mov	r7, r3
 80063f4:	898b      	ldrh	r3, [r1, #12]
 80063f6:	4605      	mov	r5, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	05db      	lsls	r3, r3, #23
 80063fc:	4616      	mov	r6, r2
 80063fe:	d505      	bpl.n	800640c <__swrite+0x1e>
 8006400:	2302      	movs	r3, #2
 8006402:	2200      	movs	r2, #0
 8006404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006408:	f000 f980 	bl	800670c <_lseek_r>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	4632      	mov	r2, r6
 8006410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006414:	4628      	mov	r0, r5
 8006416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	463b      	mov	r3, r7
 800641e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006422:	f000 b9a7 	b.w	8006774 <_write_r>

08006426 <__sseek>:
 8006426:	b510      	push	{r4, lr}
 8006428:	460c      	mov	r4, r1
 800642a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642e:	f000 f96d 	bl	800670c <_lseek_r>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	bf15      	itete	ne
 8006438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800643a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800643e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006442:	81a3      	strheq	r3, [r4, #12]
 8006444:	bf18      	it	ne
 8006446:	81a3      	strhne	r3, [r4, #12]
 8006448:	bd10      	pop	{r4, pc}

0800644a <__sclose>:
 800644a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644e:	f000 b92b 	b.w	80066a8 <_close_r>

08006452 <__swbuf_r>:
 8006452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006454:	460e      	mov	r6, r1
 8006456:	4614      	mov	r4, r2
 8006458:	4605      	mov	r5, r0
 800645a:	b118      	cbz	r0, 8006464 <__swbuf_r+0x12>
 800645c:	6a03      	ldr	r3, [r0, #32]
 800645e:	b90b      	cbnz	r3, 8006464 <__swbuf_r+0x12>
 8006460:	f7ff faa4 	bl	80059ac <__sinit>
 8006464:	69a3      	ldr	r3, [r4, #24]
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	071a      	lsls	r2, r3, #28
 800646c:	d501      	bpl.n	8006472 <__swbuf_r+0x20>
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	b943      	cbnz	r3, 8006484 <__swbuf_r+0x32>
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f000 f82b 	bl	80064d0 <__swsetup_r>
 800647a:	b118      	cbz	r0, 8006484 <__swbuf_r+0x32>
 800647c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006480:	4638      	mov	r0, r7
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	b2f6      	uxtb	r6, r6
 8006488:	6922      	ldr	r2, [r4, #16]
 800648a:	4637      	mov	r7, r6
 800648c:	1a98      	subs	r0, r3, r2
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	4283      	cmp	r3, r0
 8006492:	dc05      	bgt.n	80064a0 <__swbuf_r+0x4e>
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f7ff ff64 	bl	8006364 <_fflush_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	d1ed      	bne.n	800647c <__swbuf_r+0x2a>
 80064a0:	68a3      	ldr	r3, [r4, #8]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	701e      	strb	r6, [r3, #0]
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	6962      	ldr	r2, [r4, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d004      	beq.n	80064c0 <__swbuf_r+0x6e>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	07db      	lsls	r3, r3, #31
 80064ba:	d5e1      	bpl.n	8006480 <__swbuf_r+0x2e>
 80064bc:	2e0a      	cmp	r6, #10
 80064be:	d1df      	bne.n	8006480 <__swbuf_r+0x2e>
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f7ff ff4e 	bl	8006364 <_fflush_r>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d0d9      	beq.n	8006480 <__swbuf_r+0x2e>
 80064cc:	e7d6      	b.n	800647c <__swbuf_r+0x2a>
	...

080064d0 <__swsetup_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <__swsetup_r+0xa8>)
 80064d4:	4605      	mov	r5, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	b118      	cbz	r0, 80064e4 <__swsetup_r+0x14>
 80064dc:	6a03      	ldr	r3, [r0, #32]
 80064de:	b90b      	cbnz	r3, 80064e4 <__swsetup_r+0x14>
 80064e0:	f7ff fa64 	bl	80059ac <__sinit>
 80064e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e8:	0719      	lsls	r1, r3, #28
 80064ea:	d422      	bmi.n	8006532 <__swsetup_r+0x62>
 80064ec:	06da      	lsls	r2, r3, #27
 80064ee:	d407      	bmi.n	8006500 <__swsetup_r+0x30>
 80064f0:	2209      	movs	r2, #9
 80064f2:	602a      	str	r2, [r5, #0]
 80064f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e033      	b.n	8006568 <__swsetup_r+0x98>
 8006500:	0758      	lsls	r0, r3, #29
 8006502:	d512      	bpl.n	800652a <__swsetup_r+0x5a>
 8006504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006506:	b141      	cbz	r1, 800651a <__swsetup_r+0x4a>
 8006508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <__swsetup_r+0x46>
 8006510:	4628      	mov	r0, r5
 8006512:	f000 f94f 	bl	80067b4 <_free_r>
 8006516:	2300      	movs	r3, #0
 8006518:	6363      	str	r3, [r4, #52]	@ 0x34
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	2300      	movs	r3, #0
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f043 0308 	orr.w	r3, r3, #8
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	b94b      	cbnz	r3, 800654a <__swsetup_r+0x7a>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800653c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006540:	d003      	beq.n	800654a <__swsetup_r+0x7a>
 8006542:	4621      	mov	r1, r4
 8006544:	4628      	mov	r0, r5
 8006546:	f000 f83e 	bl	80065c6 <__smakebuf_r>
 800654a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654e:	f013 0201 	ands.w	r2, r3, #1
 8006552:	d00a      	beq.n	800656a <__swsetup_r+0x9a>
 8006554:	2200      	movs	r2, #0
 8006556:	60a2      	str	r2, [r4, #8]
 8006558:	6962      	ldr	r2, [r4, #20]
 800655a:	4252      	negs	r2, r2
 800655c:	61a2      	str	r2, [r4, #24]
 800655e:	6922      	ldr	r2, [r4, #16]
 8006560:	b942      	cbnz	r2, 8006574 <__swsetup_r+0xa4>
 8006562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006566:	d1c5      	bne.n	80064f4 <__swsetup_r+0x24>
 8006568:	bd38      	pop	{r3, r4, r5, pc}
 800656a:	0799      	lsls	r1, r3, #30
 800656c:	bf58      	it	pl
 800656e:	6962      	ldrpl	r2, [r4, #20]
 8006570:	60a2      	str	r2, [r4, #8]
 8006572:	e7f4      	b.n	800655e <__swsetup_r+0x8e>
 8006574:	2000      	movs	r0, #0
 8006576:	e7f7      	b.n	8006568 <__swsetup_r+0x98>
 8006578:	20000018 	.word	0x20000018

0800657c <__swhatbuf_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	460c      	mov	r4, r1
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	b096      	sub	sp, #88	@ 0x58
 8006586:	4615      	mov	r5, r2
 8006588:	2900      	cmp	r1, #0
 800658a:	461e      	mov	r6, r3
 800658c:	da0c      	bge.n	80065a8 <__swhatbuf_r+0x2c>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	2100      	movs	r1, #0
 8006592:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006596:	bf14      	ite	ne
 8006598:	2340      	movne	r3, #64	@ 0x40
 800659a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800659e:	2000      	movs	r0, #0
 80065a0:	6031      	str	r1, [r6, #0]
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	b016      	add	sp, #88	@ 0x58
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	466a      	mov	r2, sp
 80065aa:	f000 f88d 	bl	80066c8 <_fstat_r>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	dbed      	blt.n	800658e <__swhatbuf_r+0x12>
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065bc:	4259      	negs	r1, r3
 80065be:	4159      	adcs	r1, r3
 80065c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c4:	e7eb      	b.n	800659e <__swhatbuf_r+0x22>

080065c6 <__smakebuf_r>:
 80065c6:	898b      	ldrh	r3, [r1, #12]
 80065c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ca:	079d      	lsls	r5, r3, #30
 80065cc:	4606      	mov	r6, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	d507      	bpl.n	80065e2 <__smakebuf_r+0x1c>
 80065d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2301      	movs	r3, #1
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	b003      	add	sp, #12
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e2:	ab01      	add	r3, sp, #4
 80065e4:	466a      	mov	r2, sp
 80065e6:	f7ff ffc9 	bl	800657c <__swhatbuf_r>
 80065ea:	9f00      	ldr	r7, [sp, #0]
 80065ec:	4605      	mov	r5, r0
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7ff fc21 	bl	8005e38 <_malloc_r>
 80065f6:	b948      	cbnz	r0, 800660c <__smakebuf_r+0x46>
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d4ee      	bmi.n	80065de <__smakebuf_r+0x18>
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	e7e2      	b.n	80065d2 <__smakebuf_r+0xc>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800661c:	b15b      	cbz	r3, 8006636 <__smakebuf_r+0x70>
 800661e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006622:	4630      	mov	r0, r6
 8006624:	f000 f862 	bl	80066ec <_isatty_r>
 8006628:	b128      	cbz	r0, 8006636 <__smakebuf_r+0x70>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f023 0303 	bic.w	r3, r3, #3
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	431d      	orrs	r5, r3
 800663a:	81a5      	strh	r5, [r4, #12]
 800663c:	e7cf      	b.n	80065de <__smakebuf_r+0x18>

0800663e <_putc_r>:
 800663e:	b570      	push	{r4, r5, r6, lr}
 8006640:	460d      	mov	r5, r1
 8006642:	4614      	mov	r4, r2
 8006644:	4606      	mov	r6, r0
 8006646:	b118      	cbz	r0, 8006650 <_putc_r+0x12>
 8006648:	6a03      	ldr	r3, [r0, #32]
 800664a:	b90b      	cbnz	r3, 8006650 <_putc_r+0x12>
 800664c:	f7ff f9ae 	bl	80059ac <__sinit>
 8006650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006652:	07d8      	lsls	r0, r3, #31
 8006654:	d405      	bmi.n	8006662 <_putc_r+0x24>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	0599      	lsls	r1, r3, #22
 800665a:	d402      	bmi.n	8006662 <_putc_r+0x24>
 800665c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665e:	f7ff fa86 	bl	8005b6e <__retarget_lock_acquire_recursive>
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	3b01      	subs	r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	da05      	bge.n	8006678 <_putc_r+0x3a>
 800666c:	69a2      	ldr	r2, [r4, #24]
 800666e:	4293      	cmp	r3, r2
 8006670:	db12      	blt.n	8006698 <_putc_r+0x5a>
 8006672:	b2eb      	uxtb	r3, r5
 8006674:	2b0a      	cmp	r3, #10
 8006676:	d00f      	beq.n	8006698 <_putc_r+0x5a>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	701d      	strb	r5, [r3, #0]
 8006680:	b2ed      	uxtb	r5, r5
 8006682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006684:	07da      	lsls	r2, r3, #31
 8006686:	d405      	bmi.n	8006694 <_putc_r+0x56>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	059b      	lsls	r3, r3, #22
 800668c:	d402      	bmi.n	8006694 <_putc_r+0x56>
 800668e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006690:	f7ff fa6e 	bl	8005b70 <__retarget_lock_release_recursive>
 8006694:	4628      	mov	r0, r5
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	4629      	mov	r1, r5
 800669a:	4622      	mov	r2, r4
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fed8 	bl	8006452 <__swbuf_r>
 80066a2:	4605      	mov	r5, r0
 80066a4:	e7ed      	b.n	8006682 <_putc_r+0x44>
	...

080066a8 <_close_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	2300      	movs	r3, #0
 80066ac:	4d05      	ldr	r5, [pc, #20]	@ (80066c4 <_close_r+0x1c>)
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fa fbb1 	bl	8000e1a <_close>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_close_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_close_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	200002dc 	.word	0x200002dc

080066c8 <_fstat_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	2300      	movs	r3, #0
 80066cc:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_fstat_r+0x20>)
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f7fa fbac 	bl	8000e32 <_fstat>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d102      	bne.n	80066e4 <_fstat_r+0x1c>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	b103      	cbz	r3, 80066e4 <_fstat_r+0x1c>
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	200002dc 	.word	0x200002dc

080066ec <_isatty_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	2300      	movs	r3, #0
 80066f0:	4d05      	ldr	r5, [pc, #20]	@ (8006708 <_isatty_r+0x1c>)
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fa fbab 	bl	8000e52 <_isatty>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_isatty_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_isatty_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	200002dc 	.word	0x200002dc

0800670c <_lseek_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4604      	mov	r4, r0
 8006710:	4d06      	ldr	r5, [pc, #24]	@ (800672c <_lseek_r+0x20>)
 8006712:	4608      	mov	r0, r1
 8006714:	4611      	mov	r1, r2
 8006716:	2200      	movs	r2, #0
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f7fa fba4 	bl	8000e68 <_lseek>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_lseek_r+0x1e>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_lseek_r+0x1e>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	200002dc 	.word	0x200002dc

08006730 <_read_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	4d06      	ldr	r5, [pc, #24]	@ (8006750 <_read_r+0x20>)
 8006736:	4608      	mov	r0, r1
 8006738:	4611      	mov	r1, r2
 800673a:	2200      	movs	r2, #0
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fa fb4e 	bl	8000de0 <_read>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_read_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_read_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200002dc 	.word	0x200002dc

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	2300      	movs	r3, #0
 8006758:	4d05      	ldr	r5, [pc, #20]	@ (8006770 <_sbrk_r+0x1c>)
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fa fb90 	bl	8000e84 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	200002dc 	.word	0x200002dc

08006774 <_write_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	4d06      	ldr	r5, [pc, #24]	@ (8006794 <_write_r+0x20>)
 800677a:	4608      	mov	r0, r1
 800677c:	4611      	mov	r1, r2
 800677e:	2200      	movs	r2, #0
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7f9 fe76 	bl	8000474 <_write>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_write_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_write_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200002dc 	.word	0x200002dc

08006798 <memchr>:
 8006798:	b2c9      	uxtb	r1, r1
 800679a:	4603      	mov	r3, r0
 800679c:	4402      	add	r2, r0
 800679e:	b510      	push	{r4, lr}
 80067a0:	4293      	cmp	r3, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	d101      	bne.n	80067aa <memchr+0x12>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e003      	b.n	80067b2 <memchr+0x1a>
 80067aa:	7804      	ldrb	r4, [r0, #0]
 80067ac:	3301      	adds	r3, #1
 80067ae:	428c      	cmp	r4, r1
 80067b0:	d1f6      	bne.n	80067a0 <memchr+0x8>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <_free_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4605      	mov	r5, r0
 80067b8:	2900      	cmp	r1, #0
 80067ba:	d041      	beq.n	8006840 <_free_r+0x8c>
 80067bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c0:	1f0c      	subs	r4, r1, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfb8      	it	lt
 80067c6:	18e4      	addlt	r4, r4, r3
 80067c8:	f7ff fdf4 	bl	80063b4 <__malloc_lock>
 80067cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <_free_r+0x90>)
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	b933      	cbnz	r3, 80067e0 <_free_r+0x2c>
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	6014      	str	r4, [r2, #0]
 80067d6:	4628      	mov	r0, r5
 80067d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067dc:	f7ff bdf0 	b.w	80063c0 <__malloc_unlock>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d908      	bls.n	80067f6 <_free_r+0x42>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	1821      	adds	r1, r4, r0
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf01      	itttt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	1809      	addeq	r1, r1, r0
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	e7ed      	b.n	80067d2 <_free_r+0x1e>
 80067f6:	461a      	mov	r2, r3
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b10b      	cbz	r3, 8006800 <_free_r+0x4c>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d9fa      	bls.n	80067f6 <_free_r+0x42>
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	1850      	adds	r0, r2, r1
 8006804:	42a0      	cmp	r0, r4
 8006806:	d10b      	bne.n	8006820 <_free_r+0x6c>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	4401      	add	r1, r0
 800680c:	1850      	adds	r0, r2, r1
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	4283      	cmp	r3, r0
 8006812:	d1e0      	bne.n	80067d6 <_free_r+0x22>
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4408      	add	r0, r1
 800681a:	6053      	str	r3, [r2, #4]
 800681c:	6010      	str	r0, [r2, #0]
 800681e:	e7da      	b.n	80067d6 <_free_r+0x22>
 8006820:	d902      	bls.n	8006828 <_free_r+0x74>
 8006822:	230c      	movs	r3, #12
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	e7d6      	b.n	80067d6 <_free_r+0x22>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	1821      	adds	r1, r4, r0
 800682c:	428b      	cmp	r3, r1
 800682e:	bf02      	ittt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	1809      	addeq	r1, r1, r0
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	bf08      	it	eq
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6054      	str	r4, [r2, #4]
 800683e:	e7ca      	b.n	80067d6 <_free_r+0x22>
 8006840:	bd38      	pop	{r3, r4, r5, pc}
 8006842:	bf00      	nop
 8006844:	200002d8 	.word	0x200002d8

08006848 <_init>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr

08006854 <_fini>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr
